{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\views\\portal\\tyyh\\tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\views\\portal\\tyyh\\tree.vue","mtime":1560138773073},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport {fetchTree} from \"@/api/portal/tyyh/tyyh\";\nexport default {\n  name: \"table_user\",\n  data() {\n    return {\n        defaultProps: {\n            children: 'children',\n            label: 'name',\n            isLeaf: \"leaf\"\n        },\n        rid:0,\n    };\n  },\n  mounted() {\n  },\n  methods: {\n      handleNodeClick(data) {\n          console.log(\"node\", data);\n      },\n      // 异步树叶子节点懒加载逻辑\n      loadNode(node, resolve) {\n          // 一级节点处理\n          if (node.level === 0) {\n              this.requestTree(resolve);\n          }\n          // 其余节点处理\n          if (node.level >= 1) {\n              this.getIndex(node, resolve);\n          }\n      },\n      // 异步加载叶子节点数据函数\n      getIndex(node, resolve) {\n          console.log(node)\n          var param = {\n          };\n          fetchTree(param).then(response => {\n              let treeData = response.data.data;\n              // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n              // treeData.forEach(value => {\n              //   if (value.isRealLeaf === 'Y') {\n              //     value.leaf = true//不为叶子节点\n              //   } else {\n              //     value.leaf = false//为叶子节点\n              //   }\n              // })\n              resolve(treeData);\n          }).catch(err => {\n          });\n      },\n      // 首次加载一级节点数据函数\n      requestTree(resolve) {\n          //要传的参数\n          let param = {\n          };\n          fetchTree(param).then(response => {\n              let treeData = response.data.data;\n              // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n              //  treeData.forEach(value => {\n              //   if (value.isRealLeaf === 'Y') {\n              //     value.leaf = true//不为叶子节点\n              //   } else {\n              //     value.leaf = false//为叶子节点\n              //   }\n              // })\n              resolve(treeData);\n          }).catch(err => {\n          });\n      }\n  }\n\n};\n",{"version":3,"sources":["tree.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"tree.vue","sourceRoot":"src/views/portal/tyyh","sourcesContent":["<template>\n  <el-tree\n          lazy\n          :props=\"defaultProps\"\n          :load=\"loadNode\"\n          @node-click=\"handleNodeClick\">\n  </el-tree>\n</template>\n<script>\n  import {fetchTree} from \"@/api/portal/tyyh/tyyh\";\n  export default {\n    name: \"table_user\",\n    data() {\n      return {\n          defaultProps: {\n              children: 'children',\n              label: 'name',\n              isLeaf: \"leaf\"\n          },\n          rid:0,\n      };\n    },\n    mounted() {\n    },\n    methods: {\n        handleNodeClick(data) {\n            console.log(\"node\", data);\n        },\n        // 异步树叶子节点懒加载逻辑\n        loadNode(node, resolve) {\n            // 一级节点处理\n            if (node.level === 0) {\n                this.requestTree(resolve);\n            }\n            // 其余节点处理\n            if (node.level >= 1) {\n                this.getIndex(node, resolve);\n            }\n        },\n        // 异步加载叶子节点数据函数\n        getIndex(node, resolve) {\n            console.log(node)\n            var param = {\n            };\n            fetchTree(param).then(response => {\n                let treeData = response.data.data;\n                // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n                // treeData.forEach(value => {\n                //   if (value.isRealLeaf === 'Y') {\n                //     value.leaf = true//不为叶子节点\n                //   } else {\n                //     value.leaf = false//为叶子节点\n                //   }\n                // })\n                resolve(treeData);\n            }).catch(err => {\n            });\n        },\n        // 首次加载一级节点数据函数\n        requestTree(resolve) {\n            //要传的参数\n            let param = {\n            };\n            fetchTree(param).then(response => {\n                let treeData = response.data.data;\n                // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n                //  treeData.forEach(value => {\n                //   if (value.isRealLeaf === 'Y') {\n                //     value.leaf = true//不为叶子节点\n                //   } else {\n                //     value.leaf = false//为叶子节点\n                //   }\n                // })\n                resolve(treeData);\n            }).catch(err => {\n            });\n        }\n    }\n\n  };\n</script>\n\n\n"]}]}