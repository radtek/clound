{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\views\\activiti\\task.vue?vue&type=template&id=dd155f2a&scoped=true&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\views\\activiti\\task.vue","mtime":1551167422700},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"execution\" },\n    [\n      _c(\n        \"basic-container\",\n        [\n          _c(\"avue-crud\", {\n            ref: \"crud\",\n            attrs: {\n              page: _vm.page,\n              data: _vm.tableData,\n              \"table-loading\": _vm.tableLoading,\n              option: _vm.tableOption\n            },\n            on: { \"on-load\": _vm.getList, \"refresh-change\": _vm.refreshChange },\n            scopedSlots: _vm._u([\n              {\n                key: \"menuBtn\",\n                fn: function(scope) {\n                  return [\n                    _vm.permissions.act_task_manage\n                      ? _c(\n                          \"el-dropdown-item\",\n                          {\n                            attrs: { divided: \"\" },\n                            nativeOn: {\n                              click: function($event) {\n                                return _vm.audit(scope.row, scope.index)\n                              }\n                            }\n                          },\n                          [_vm._v(\"审批\\n        \")]\n                        )\n                      : _vm._e(),\n                    _vm.permissions.act_task_manage\n                      ? _c(\n                          \"el-dropdown-item\",\n                          {\n                            attrs: { divided: \"\" },\n                            nativeOn: {\n                              click: function($event) {\n                                return _vm.comment(scope.row, scope.index)\n                              }\n                            }\n                          },\n                          [_vm._v(\"批注\\n        \")]\n                        )\n                      : _vm._e(),\n                    _vm.permissions.act_task_manage\n                      ? _c(\n                          \"el-dropdown-item\",\n                          {\n                            attrs: { divided: \"\" },\n                            nativeOn: {\n                              click: function($event) {\n                                return _vm.viewPic(scope.row, scope.index)\n                              }\n                            }\n                          },\n                          [_vm._v(\"流程图\\n        \")]\n                        )\n                      : _vm._e()\n                  ]\n                }\n              }\n            ])\n          })\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: { title: \"任务办理\", visible: _vm.showTask },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.showTask = $event\n            }\n          }\n        },\n        [\n          _c(\"avue-form\", {\n            ref: \"form\",\n            attrs: { option: _vm.formOption },\n            scopedSlots: _vm._u([\n              {\n                key: \"menuForm\",\n                fn: function(scope) {\n                  return _vm._l(_vm.flagList, function(flag) {\n                    return _c(\n                      \"el-button\",\n                      {\n                        key: flag,\n                        attrs: { icon: \"el-icon-check\", plain: \"\" },\n                        on: {\n                          click: function($event) {\n                            return _vm.handleTask(scope.row, flag)\n                          }\n                        }\n                      },\n                      [_vm._v(_vm._s(flag) + \"\\n        \")]\n                    )\n                  })\n                }\n              }\n            ]),\n            model: {\n              value: _vm.obj,\n              callback: function($$v) {\n                _vm.obj = $$v\n              },\n              expression: \"obj\"\n            }\n          })\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: { title: \"批注列表\", visible: _vm.showComment },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.showComment = $event\n            }\n          }\n        },\n        [\n          _c(\"avue-crud\", {\n            attrs: { data: _vm.taskTableData, option: _vm.taskOption }\n          })\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          attrs: { title: \"流程图\", visible: _vm.showPicDialog },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.showPicDialog = $event\n            }\n          }\n        },\n        [\n          _vm.showPicDialog\n            ? _c(\"img\", { attrs: { src: _vm.actPicUrl, width: \"100%\" } })\n            : _vm._e()\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}