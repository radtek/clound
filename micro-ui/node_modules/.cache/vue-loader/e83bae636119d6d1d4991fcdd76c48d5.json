{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\node_modules\\vue-quill-editor\\src\\editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-quill-editor\\src\\editor.vue","mtime":1553754713238},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\n// require sources\nimport _Quill from 'quill'\nimport defaultOptions from './options'\nconst Quill = window.Quill || _Quill\n\n// pollfill\nif (typeof Object.assign != 'function') {\n  Object.defineProperty(Object, 'assign', {\n    value(target, varArgs) {\n      if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object')\n      }\n      const to = Object(target)\n      for (let index = 1; index < arguments.length; index++) {\n        const nextSource = arguments[index]\n        if (nextSource != null) {\n          for (const nextKey in nextSource) {\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey]\n            }\n          }\n        }\n      }\n      return to\n    },\n    writable: true,\n    configurable: true\n  })\n}\n\n// export\nexport default {\n  name: 'quill-editor',\n  data() {\n    return {\n      _options: {},\n      _content: '',\n      defaultOptions\n    }\n  },\n  props: {\n    content: String,\n    value: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    options: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    globalOptions: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    }\n  },\n  mounted() {\n    this.initialize()\n  },\n  beforeDestroy() {\n    this.quill = null\n    delete this.quill\n  },\n  methods: {\n    // Init Quill instance\n    initialize() {\n      if (this.$el) {\n\n        // Options\n        this._options = Object.assign({}, this.defaultOptions, this.globalOptions, this.options)\n\n        // Instance\n        this.quill = new Quill(this.$refs.editor, this._options)\n        \n        this.quill.enable(false)\n\n        // Set editor content\n        if (this.value || this.content) {\n          this.quill.pasteHTML(this.value || this.content)\n        }\n\n        // Disabled editor\n        if (!this.disabled) {\n          this.quill.enable(true)\n        }\n\n        // Mark model as touched if editor lost focus\n        this.quill.on('selection-change', range => {\n          if (!range) {\n            this.$emit('blur', this.quill)\n          } else {\n            this.$emit('focus', this.quill)\n          }\n        })\n\n        // Update model if text changes\n        this.quill.on('text-change', (delta, oldDelta, source) => {\n          let html = this.$refs.editor.children[0].innerHTML\n          const quill = this.quill\n          const text = this.quill.getText()\n          if (html === '<p><br></p>') html = ''\n          this._content = html\n          this.$emit('input', this._content)\n          this.$emit('change', { html, text, quill })\n        })\n\n        // Emit ready event\n        this.$emit('ready', this.quill)\n      }\n    }\n  },\n  watch: {\n    // Watch content change\n    content(newVal, oldVal) {\n      if (this.quill) {\n        if (newVal && newVal !== this._content) {\n          this._content = newVal\n          this.quill.pasteHTML(newVal)\n        } else if(!newVal) {\n          this.quill.setText('')\n        }\n      }\n    },\n    // Watch content change\n    value(newVal, oldVal) {\n      if (this.quill) {\n        if (newVal && newVal !== this._content) {\n          this._content = newVal\n          this.quill.pasteHTML(newVal)\n        } else if(!newVal) {\n          this.quill.setText('')\n        }\n      }\n    },\n    // Watch disabled change\n    disabled(newVal, oldVal) {\n      if (this.quill) {\n        this.quill.enable(!newVal)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["editor.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"editor.vue","sourceRoot":"node_modules/vue-quill-editor/src","sourcesContent":["<template>\r\n  <div class=\"quill-editor\">\r\n    <slot name=\"toolbar\"></slot>\r\n    <div ref=\"editor\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  // require sources\r\n  import _Quill from 'quill'\r\n  import defaultOptions from './options'\r\n  const Quill = window.Quill || _Quill\r\n\r\n  // pollfill\r\n  if (typeof Object.assign != 'function') {\r\n    Object.defineProperty(Object, 'assign', {\r\n      value(target, varArgs) {\r\n        if (target == null) {\r\n          throw new TypeError('Cannot convert undefined or null to object')\r\n        }\r\n        const to = Object(target)\r\n        for (let index = 1; index < arguments.length; index++) {\r\n          const nextSource = arguments[index]\r\n          if (nextSource != null) {\r\n            for (const nextKey in nextSource) {\r\n              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n                to[nextKey] = nextSource[nextKey]\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return to\r\n      },\r\n      writable: true,\r\n      configurable: true\r\n    })\r\n  }\r\n\r\n  // export\r\n  export default {\r\n    name: 'quill-editor',\r\n    data() {\r\n      return {\r\n        _options: {},\r\n        _content: '',\r\n        defaultOptions\r\n      }\r\n    },\r\n    props: {\r\n      content: String,\r\n      value: String,\r\n      disabled: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      options: {\r\n        type: Object,\r\n        required: false,\r\n        default: () => ({})\r\n      },\r\n      globalOptions: {\r\n        type: Object,\r\n        required: false,\r\n        default: () => ({})\r\n      }\r\n    },\r\n    mounted() {\r\n      this.initialize()\r\n    },\r\n    beforeDestroy() {\r\n      this.quill = null\r\n      delete this.quill\r\n    },\r\n    methods: {\r\n      // Init Quill instance\r\n      initialize() {\r\n        if (this.$el) {\r\n\r\n          // Options\r\n          this._options = Object.assign({}, this.defaultOptions, this.globalOptions, this.options)\r\n\r\n          // Instance\r\n          this.quill = new Quill(this.$refs.editor, this._options)\r\n          \r\n          this.quill.enable(false)\r\n\r\n          // Set editor content\r\n          if (this.value || this.content) {\r\n            this.quill.pasteHTML(this.value || this.content)\r\n          }\r\n\r\n          // Disabled editor\r\n          if (!this.disabled) {\r\n            this.quill.enable(true)\r\n          }\r\n\r\n          // Mark model as touched if editor lost focus\r\n          this.quill.on('selection-change', range => {\r\n            if (!range) {\r\n              this.$emit('blur', this.quill)\r\n            } else {\r\n              this.$emit('focus', this.quill)\r\n            }\r\n          })\r\n\r\n          // Update model if text changes\r\n          this.quill.on('text-change', (delta, oldDelta, source) => {\r\n            let html = this.$refs.editor.children[0].innerHTML\r\n            const quill = this.quill\r\n            const text = this.quill.getText()\r\n            if (html === '<p><br></p>') html = ''\r\n            this._content = html\r\n            this.$emit('input', this._content)\r\n            this.$emit('change', { html, text, quill })\r\n          })\r\n\r\n          // Emit ready event\r\n          this.$emit('ready', this.quill)\r\n        }\r\n      }\r\n    },\r\n    watch: {\r\n      // Watch content change\r\n      content(newVal, oldVal) {\r\n        if (this.quill) {\r\n          if (newVal && newVal !== this._content) {\r\n            this._content = newVal\r\n            this.quill.pasteHTML(newVal)\r\n          } else if(!newVal) {\r\n            this.quill.setText('')\r\n          }\r\n        }\r\n      },\r\n      // Watch content change\r\n      value(newVal, oldVal) {\r\n        if (this.quill) {\r\n          if (newVal && newVal !== this._content) {\r\n            this._content = newVal\r\n            this.quill.pasteHTML(newVal)\r\n          } else if(!newVal) {\r\n            this.quill.setText('')\r\n          }\r\n        }\r\n      },\r\n      // Watch disabled change\r\n      disabled(newVal, oldVal) {\r\n        if (this.quill) {\r\n          this.quill.enable(!newVal)\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n"]}]}