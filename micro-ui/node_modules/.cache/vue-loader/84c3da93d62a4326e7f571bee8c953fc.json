{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\page\\login\\userlogin.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\page\\login\\userlogin.vue","mtime":1554773148474},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport {randomLenNum} from \"@/util/util\";\nimport {mapGetters} from \"vuex\";\n let userAgent;\n\nexport default {\n    name: \"userlogin\",\n    data() {\n\n        return {\n            socialForm: {\n                code: '',\n                state: ''\n            },\n            pkiForm: {\n                code: '',\n                state: ''\n            },\n            loginForm: {\n                username: \"admin\",\n                password: \"123456\",\n                code: \"\",\n                redomStr: \"\"\n            },\n            JITDSignOcx: [],\n            checked: false,\n            code: {\n                src: \"/code\",\n                value: \"\",\n                len: 4,\n                type: \"image\"\n            },\n            loginRules: {\n                username: [\n                    {required: true, message: \"请输入用户名\", trigger: \"blur\"}\n                ],\n                password: [\n                    {required: true, message: \"请输入密码\", trigger: \"blur\"},\n                    {min: 6, message: \"密码长度最少为6位\", trigger: \"blur\"}\n                ]/*,\n    code: [\n      { required: true, message: \"请输入验证码\", trigger: \"blur\" },\n      { min: 4, max: 4, message: \"验证码长度为4位\", trigger: \"blur\" }\n    ]*/\n            },\n            passwordType: \"password\"\n        };\n    },\n    watch: {\n        $route() {\n            const params = this.$route.query\n            this.socialForm.state = params.state\n            this.socialForm.code = params.code\n            if (!validatenull(this.socialForm.state)) {\n                const loading = this.$loading({\n                    lock: true,\n                    text: `登录中,请稍后。。。`,\n                    spinner: 'el-icon-loading'\n                })\n                setTimeout(() => {\n                    loading.close()\n                }, 2000)\n                this.handleSocialLogin()\n            }\n        }\n    },\n    created() {\n        this.refreshCode();\n        this.choseBrowser();\n    },\n    mounted() {\n        this.JITDSignOcx = document.getElementById('JITDSignOcx')\n    },\n    computed: {\n        ...mapGetters([\"tagWel\"])\n    },\n    props: [],\n    methods: {\n        choseBrowser(){\n            let browser = navigator.userAgent.toLocaleLowerCase();\n            if(browser.indexOf(\"msie\") >= 0 || browser.indexOf(\"trident\") >= 0){\n                this.userAgent=true\n            }else{\n                this.userAgent=false\n            }\n\n        },\n        refreshCode() {\n            this.loginForm.code = ''\n            this.loginForm.randomStr = randomLenNum(this.code.len, true)\n            this.code.type === 'text'\n                ? (this.code.value = randomLenNum(this.code.len))\n                : (this.code.src = `${this.codeUrl}?randomStr=${this.loginForm.randomStr}`)\n        },\n        showPassword() {\n            this.passwordType == ''\n                ? (this.passwordType = 'password')\n                : (this.passwordType = '')\n        },\n        handleSocialLogin() {\n            this.$store.dispatch('LoginBySocial', this.socialForm).then(\n                () => {\n                    this.$router.push({path: this.tagWel.value});\n                }\n            )\n        },\n        handleLogin() {\n            this.$refs.loginForm.validate(valid => {\n                if (valid) {\n                    this.$store.dispatch(\"LoginByUsername\", this.loginForm).then(() => {\n                        this.$router.push({path: this.tagWel.value});\n                    }).catch(() => {\n                        this.refreshCode()\n                    })\n\n                }\n            });\n        },\n        pkiLogin() {\n            const loading = this.$loading({\n                lock: true,\n                text: `登录中,请稍后。。。`,\n                spinner: 'el-icon-loading'\n            })\n            this.initJitOcx(loading)\n            if(this.pkiForm.code){\n\n                this.$store.dispatch(\"LoginByPki\", this.pkiForm).then(() => {\n                    this.$router.push({path: this.tagWel.value});\n                    setTimeout(() => {\n                        loading.close()\n                    }, 2000)\n                }).catch(() => {\n                    setTimeout(() => {\n                        loading.close()\n                    }, 2000)\n                });\n\n            }\n        },\n        msg(msg){\n            this.$message({\n                type:'error',\n                dangerouslyUseHTMLString: true,\n                duration:4000,\n                message: msg\n            });\n\n        },\n        initJitOcx(loading) {\n            try {\n                let InitParam = \"<?xml version=\\\"1.0\\\" encoding=\\\"gb2312\\\"?><authinfo><liblist><lib type=\\\"CSP\\\" version=\\\"1.0\\\" dllname=\\\"\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib><lib type=\\\"SKF\\\" version=\\\"1.1\\\" dllname=\\\"SERfR01DQUlTLmRsbA==\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib><lib type=\\\"SKF\\\" version=\\\"1.1\\\" dllname=\\\"U2h1dHRsZUNzcDExXzMwMDBHTS5kbGw=\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib><lib type=\\\"SKF\\\" version=\\\"1.1\\\" dllname=\\\"U0tGQVBJLmRsbA==\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib></liblist></authinfo>\";\n                this.JITDSignOcx.Initialize(InitParam);\n                if (this.JITDSignOcx.GetErrorCode() != 0) {\n                    loading.close()\n                    this.msg(\"初始化失败，错误码：\" + this.JITDSignOcx.GetErrorCode() + \" 错误信息：\" + this.JITDSignOcx.GetErrorMessage(this.JITDSignOcx.GetErrorCode()))\n                    this.JITDSignOcx.Finalize();\n\n                    return false;\n                }\n                //控制证书为一个时，不弹出证书选择框\n                this.JITDSignOcx.SetCertChooseType(1);\n                this.JITDSignOcx.SetCert(\"SC\", \"\", \"\", \"\", \"\", \"\");\n                if (this.JITDSignOcx.GetErrorCode() != 0) {\n                    loading.close()\n                    this.msg(\"错误码：\" + this.JITDSignOcx.GetErrorCode() + \"　错误信息：\" + this.JITDSignOcx.GetErrorMessage(this.JITDSignOcx.GetErrorCode()))\n                    this.JITDSignOcx.Finalize();\n\n                    return false;\n                } else {\n                    let temp_DSign_Result = this.JITDSignOcx.DetachSignStr(\"\", \"ygnet\");\n                    if (this.JITDSignOcx.GetErrorCode() != 0) {\n                        loading.close()\n                        this.msg(\"错误码：\" + JITDSignOcx.GetErrorCode() + \"　错误信息：\" + this.JITDSignOcx.GetErrorMessage(this.JITDSignOcx.GetErrorCode()));\n                        this.JITDSignOcx.Finalize();\n\n                        return false;\n                    }\n                    this.JITDSignOcx.Finalize();\n                    this.pkiForm.code=temp_DSign_Result;\n                }\n                loading.close()\n                return false;\n            } catch (e) {\n                loading.close()\n               this.msg('PKI证书驱动存在问题、无法获取PKI证书。\\n浏览器不兼容证书登录:\\n');\n\n            }\n        }\n\n    }\n};\n",{"version":3,"sources":["userlogin.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"userlogin.vue","sourceRoot":"src/page/login","sourcesContent":["<template>\n\n    <el-form class=\"login-form\"\n             status-icon\n             :rules=\"loginRules\"\n             ref=\"loginForm\"\n             :model=\"loginForm\"\n             label-width=\"0\">\n        <el-form-item prop=\"username\">\n            <el-input size=\"small\"\n                      @keyup.enter.native=\"handleLogin\"\n                      v-model=\"loginForm.username\"\n                      auto-complete=\"off\"\n                      placeholder=\"请输入用户名\">\n                <i slot=\"prefix\"\n                   class=\"icon-yonghu\"></i>\n            </el-input>\n        </el-form-item>\n        <el-form-item prop=\"password\">\n            <el-input size=\"small\"\n                      @keyup.enter.native=\"handleLogin\"\n                      :type=\"passwordType\"\n                      v-model=\"loginForm.password\"\n                      auto-complete=\"off\"\n                      placeholder=\"请输入密码\">\n                <i class=\"el-icon-view el-input__icon\"\n                   slot=\"suffix\"\n                   @click=\"showPassword\"></i>\n                <i slot=\"prefix\"\n                   class=\"icon-mima\"></i>\n            </el-input>\n        </el-form-item>\n        <!-- <el-form-item prop=\"code\">\n           <el-row :span=\"24\">\n             <el-col :span=\"16\">\n               <el-input size=\"small\"\n                         @keyup.enter.native=\"handleLogin\"\n                         :maxlength=\"code.len\"\n                         v-model=\"loginForm.code\"\n                         auto-complete=\"off\"\n                         placeholder=\"请输入验证码\">\n                 <i slot=\"prefix\"\n                    class=\"icon-yanzhengma\"></i>\n               </el-input>\n             </el-col>\n             <el-col :span=\"8\">\n               <div class=\"login-code\">\n                 <span class=\"login-code-img\"\n                       @click=\"refreshCode\"\n                       v-if=\"code.type == 'text'\">{{code.value}}</span>\n                 <img :src=\"code.src\"\n                      class=\"login-code-img\"\n                      @click=\"refreshCode\"\n                      v-else/>\n                 &lt;!&ndash; <i class=\"icon-shuaxin login-code-icon\" @click=\"refreshCode\"></i> &ndash;&gt;\n               </div>\n             </el-col>\n           </el-row>\n\n         </el-form-item>-->\n        <el-form-item>\n            <div>\n\n                <div style=\"float: left;width: 42%\">\n                    <el-button type=\"primary\"\n                               size=\"small\"\n                               @click.native.prevent=\"handleLogin\"\n                               class=\"login-submit\">账户登录\n                    </el-button>\n                </div>\n                <div style=\"float: right;width: 50%\">\n                    <el-button type=\"primary\"\n                               size=\"small\"\n                               @click.native.prevent=\"pkiLogin\"\n                               class=\"login-submit\">证书登陆\n                    </el-button>\n                </div>\n\n\n                <object v-if=\"userAgent\" id=\"JITDSignOcx\" classid=\"clsid:B0EF56AD-D711-412D-BE74-A751595F3633\"\n                        codebase=\"/oci/JITComVCTK_S.cab#version=2,1,1,3\"></object>\n\n                <embed v-else id=\"JITDSignOcx\" type=\"application/x-jit-sign-vctk-s-plugin-boc\" height=\"0px\" width=\"0px\"/>\n            </div>\n        </el-form-item>\n    </el-form>\n\n</template>\n\n<script>\n\n    import {randomLenNum} from \"@/util/util\";\n    import {mapGetters} from \"vuex\";\n     let userAgent;\n\n    export default {\n        name: \"userlogin\",\n        data() {\n\n            return {\n                socialForm: {\n                    code: '',\n                    state: ''\n                },\n                pkiForm: {\n                    code: '',\n                    state: ''\n                },\n                loginForm: {\n                    username: \"admin\",\n                    password: \"123456\",\n                    code: \"\",\n                    redomStr: \"\"\n                },\n                JITDSignOcx: [],\n                checked: false,\n                code: {\n                    src: \"/code\",\n                    value: \"\",\n                    len: 4,\n                    type: \"image\"\n                },\n                loginRules: {\n                    username: [\n                        {required: true, message: \"请输入用户名\", trigger: \"blur\"}\n                    ],\n                    password: [\n                        {required: true, message: \"请输入密码\", trigger: \"blur\"},\n                        {min: 6, message: \"密码长度最少为6位\", trigger: \"blur\"}\n                    ]/*,\n        code: [\n          { required: true, message: \"请输入验证码\", trigger: \"blur\" },\n          { min: 4, max: 4, message: \"验证码长度为4位\", trigger: \"blur\" }\n        ]*/\n                },\n                passwordType: \"password\"\n            };\n        },\n        watch: {\n            $route() {\n                const params = this.$route.query\n                this.socialForm.state = params.state\n                this.socialForm.code = params.code\n                if (!validatenull(this.socialForm.state)) {\n                    const loading = this.$loading({\n                        lock: true,\n                        text: `登录中,请稍后。。。`,\n                        spinner: 'el-icon-loading'\n                    })\n                    setTimeout(() => {\n                        loading.close()\n                    }, 2000)\n                    this.handleSocialLogin()\n                }\n            }\n        },\n        created() {\n            this.refreshCode();\n            this.choseBrowser();\n        },\n        mounted() {\n            this.JITDSignOcx = document.getElementById('JITDSignOcx')\n        },\n        computed: {\n            ...mapGetters([\"tagWel\"])\n        },\n        props: [],\n        methods: {\n            choseBrowser(){\n                let browser = navigator.userAgent.toLocaleLowerCase();\n                if(browser.indexOf(\"msie\") >= 0 || browser.indexOf(\"trident\") >= 0){\n                    this.userAgent=true\n                }else{\n                    this.userAgent=false\n                }\n\n            },\n            refreshCode() {\n                this.loginForm.code = ''\n                this.loginForm.randomStr = randomLenNum(this.code.len, true)\n                this.code.type === 'text'\n                    ? (this.code.value = randomLenNum(this.code.len))\n                    : (this.code.src = `${this.codeUrl}?randomStr=${this.loginForm.randomStr}`)\n            },\n            showPassword() {\n                this.passwordType == ''\n                    ? (this.passwordType = 'password')\n                    : (this.passwordType = '')\n            },\n            handleSocialLogin() {\n                this.$store.dispatch('LoginBySocial', this.socialForm).then(\n                    () => {\n                        this.$router.push({path: this.tagWel.value});\n                    }\n                )\n            },\n            handleLogin() {\n                this.$refs.loginForm.validate(valid => {\n                    if (valid) {\n                        this.$store.dispatch(\"LoginByUsername\", this.loginForm).then(() => {\n                            this.$router.push({path: this.tagWel.value});\n                        }).catch(() => {\n                            this.refreshCode()\n                        })\n\n                    }\n                });\n            },\n            pkiLogin() {\n                const loading = this.$loading({\n                    lock: true,\n                    text: `登录中,请稍后。。。`,\n                    spinner: 'el-icon-loading'\n                })\n                this.initJitOcx(loading)\n                if(this.pkiForm.code){\n\n                    this.$store.dispatch(\"LoginByPki\", this.pkiForm).then(() => {\n                        this.$router.push({path: this.tagWel.value});\n                        setTimeout(() => {\n                            loading.close()\n                        }, 2000)\n                    }).catch(() => {\n                        setTimeout(() => {\n                            loading.close()\n                        }, 2000)\n                    });\n\n                }\n            },\n            msg(msg){\n                this.$message({\n                    type:'error',\n                    dangerouslyUseHTMLString: true,\n                    duration:4000,\n                    message: msg\n                });\n\n            },\n            initJitOcx(loading) {\n                try {\n                    let InitParam = \"<?xml version=\\\"1.0\\\" encoding=\\\"gb2312\\\"?><authinfo><liblist><lib type=\\\"CSP\\\" version=\\\"1.0\\\" dllname=\\\"\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib><lib type=\\\"SKF\\\" version=\\\"1.1\\\" dllname=\\\"SERfR01DQUlTLmRsbA==\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib><lib type=\\\"SKF\\\" version=\\\"1.1\\\" dllname=\\\"U2h1dHRsZUNzcDExXzMwMDBHTS5kbGw=\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib><lib type=\\\"SKF\\\" version=\\\"1.1\\\" dllname=\\\"U0tGQVBJLmRsbA==\\\" ><algid val=\\\"SHA1\\\" sm2_hashalg=\\\"sm3\\\"/></lib></liblist></authinfo>\";\n                    this.JITDSignOcx.Initialize(InitParam);\n                    if (this.JITDSignOcx.GetErrorCode() != 0) {\n                        loading.close()\n                        this.msg(\"初始化失败，错误码：\" + this.JITDSignOcx.GetErrorCode() + \" 错误信息：\" + this.JITDSignOcx.GetErrorMessage(this.JITDSignOcx.GetErrorCode()))\n                        this.JITDSignOcx.Finalize();\n\n                        return false;\n                    }\n                    //控制证书为一个时，不弹出证书选择框\n                    this.JITDSignOcx.SetCertChooseType(1);\n                    this.JITDSignOcx.SetCert(\"SC\", \"\", \"\", \"\", \"\", \"\");\n                    if (this.JITDSignOcx.GetErrorCode() != 0) {\n                        loading.close()\n                        this.msg(\"错误码：\" + this.JITDSignOcx.GetErrorCode() + \"　错误信息：\" + this.JITDSignOcx.GetErrorMessage(this.JITDSignOcx.GetErrorCode()))\n                        this.JITDSignOcx.Finalize();\n\n                        return false;\n                    } else {\n                        let temp_DSign_Result = this.JITDSignOcx.DetachSignStr(\"\", \"ygnet\");\n                        if (this.JITDSignOcx.GetErrorCode() != 0) {\n                            loading.close()\n                            this.msg(\"错误码：\" + JITDSignOcx.GetErrorCode() + \"　错误信息：\" + this.JITDSignOcx.GetErrorMessage(this.JITDSignOcx.GetErrorCode()));\n                            this.JITDSignOcx.Finalize();\n\n                            return false;\n                        }\n                        this.JITDSignOcx.Finalize();\n                        this.pkiForm.code=temp_DSign_Result;\n                    }\n                    loading.close()\n                    return false;\n                } catch (e) {\n                    loading.close()\n                   this.msg('PKI证书驱动存在问题、无法获取PKI证书。\\n浏览器不兼容证书登录:\\n');\n\n                }\n            }\n\n        }\n    };\n</script>\n\n<style>\n</style>\n"]}]}