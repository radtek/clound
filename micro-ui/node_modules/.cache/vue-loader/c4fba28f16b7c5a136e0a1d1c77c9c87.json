{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\node_modules\\vue-json-editor\\vue-json-editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-json-editor\\vue-json-editor.vue","mtime":1520928094000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport './assets/jsoneditor.css'\nimport JsonEditor from './assets/jsoneditor'\nexport default {\n  props: ['value', 'showBtns',\"mode\",\"modes\"],\n  watch: {\n    value: function (newValue) {\n      if (!this.internalChange) {\n        this.editor.set(newValue)\n      }\n    }\n  },\n  data () {\n    return {\n      editor: null,\n      error: false,\n      json: this.value,\n      internalChange: false\n    }\n  },\n  mounted () {\n   var self = this;\n   var mode=\"tree\";\n   var modes= ['tree', 'code', 'form', 'text', 'view'];\n    if (this.mode!==undefined) mode=this.mode;\n    if (!this.modes!== undefined) modes=this.modes;\n   var options = {\n      mode: mode,\n      modes: modes, // allowed modes\n      onChange () {\n        try {\n          var json = self.editor.get()\n          self.error = false\n        } catch (e) {\n          self.error = true\n          self.$emit('has-error')\n        }\n        if (!self.error) {\n          self.json = json\n          self.$emit('json-change', json)\n          self.internalChange = true\n          self.$emit('input', json)\n          self.$nextTick(function () {\n            self.internalChange = false\n          })\n        }\n      }\n    }\n    this.editor = new JsonEditor(this.$el.querySelector('.jsoneditor-vue'), options, this.json)\n  },\n  methods: {\n    onSave () {\n      this.$emit('json-save', this.json)\n    }\n  }\n}\n",{"version":3,"sources":["vue-json-editor.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"vue-json-editor.vue","sourceRoot":"node_modules/vue-json-editor","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"jsoneditor-vue\"></div>\r\n    <div class=\"jsoneditor-btns\" v-if=\"showBtns!==false\"><button class=\"json-save-btn\" type=\"button\" @click=\"onSave()\" :disabled=\"error\">保存</button></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import './assets/jsoneditor.css'\r\n  import JsonEditor from './assets/jsoneditor'\r\n  export default {\r\n    props: ['value', 'showBtns',\"mode\",\"modes\"],\r\n    watch: {\r\n      value: function (newValue) {\r\n        if (!this.internalChange) {\r\n          this.editor.set(newValue)\r\n        }\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        editor: null,\r\n        error: false,\r\n        json: this.value,\r\n        internalChange: false\r\n      }\r\n    },\r\n    mounted () {\r\n     var self = this;\r\n     var mode=\"tree\";\r\n     var modes= ['tree', 'code', 'form', 'text', 'view'];\r\n      if (this.mode!==undefined) mode=this.mode;\r\n      if (!this.modes!== undefined) modes=this.modes;\r\n     var options = {\r\n        mode: mode,\r\n        modes: modes, // allowed modes\r\n        onChange () {\r\n          try {\r\n            var json = self.editor.get()\r\n            self.error = false\r\n          } catch (e) {\r\n            self.error = true\r\n            self.$emit('has-error')\r\n          }\r\n          if (!self.error) {\r\n            self.json = json\r\n            self.$emit('json-change', json)\r\n            self.internalChange = true\r\n            self.$emit('input', json)\r\n            self.$nextTick(function () {\r\n              self.internalChange = false\r\n            })\r\n          }\r\n        }\r\n      }\r\n      this.editor = new JsonEditor(this.$el.querySelector('.jsoneditor-vue'), options, this.json)\r\n    },\r\n    methods: {\r\n      onSave () {\r\n        this.$emit('json-save', this.json)\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .ace_line_group {\r\n    text-align: left;\r\n  }\r\n  .json-editor-container {\r\n    display: flex;\r\n    width: 100%;\r\n  }\r\n  .json-editor-container .tree-mode {\r\n    width: 50%;\r\n  }\r\n  .json-editor-container .code-mode {\r\n    flex-grow: 1;\r\n  }\r\n  .jsoneditor-btns{\r\n    text-align: center;\r\n    margin-top:10px;\r\n  }\r\n  .jsoneditor-vue .jsoneditor-outer{\r\n    min-height:150px;\r\n  }\r\n  .jsoneditor-vue div.jsoneditor-tree{\r\n    min-height: 350px;\r\n  }\r\n  .json-save-btn{\r\n    background-color: #20A0FF;\r\n    border: none;\r\n    color:#fff;\r\n    padding:5px 10px;\r\n    border-radius: 5px;\r\n  }\r\n  .json-save-btn:focus{\r\n    outline: none;\r\n  }\r\n  .json-save-btn[disabled]{\r\n    background-color: #1D8CE0;\r\n  }\r\n  code {\r\n    background-color: #f5f5f5;\r\n  }\r\n</style>\r\n"]}]}