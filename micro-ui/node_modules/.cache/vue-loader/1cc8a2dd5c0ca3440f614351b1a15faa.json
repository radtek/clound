{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\page\\index\\sidebar\\sidebarItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\page\\index\\sidebar\\sidebarItem.vue","mtime":1551167423140},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\nimport { validatenull } from \"@/util/validate\";\nimport config from \"./config.js\";\nexport default {\n  name: \"sidebarItem\",\n  data() {\n    return {\n      config: config\n    };\n  },\n  props: {\n    menu: {\n      type: Array\n    },\n    screen: {\n      type: Number\n    },\n    first: {\n      type: Boolean,\n      default: false\n    },\n    props: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    collapse: {\n      type: Boolean\n    }\n  },\n  created() {},\n  mounted() {},\n  computed: {\n    ...mapGetters([\"roles\"]),\n    labelKey() {\n      return this.props.label || this.config.propsDefault.label;\n    },\n    pathKey() {\n      return this.props.path || this.config.propsDefault.path;\n    },\n    iconKey() {\n      return this.props.icon || this.config.propsDefault.icon;\n    },\n    childrenKey() {\n      return this.props.children || this.config.propsDefault.children;\n    },\n    nowTagValue() {\n      return this.$router.$avueRouter.getValue(this.$route);\n    }\n  },\n  methods: {\n    vaildAvtive(item) {\n      const groupFlag = (item[\"group\"] || []).some(ele =>\n        this.$route.path.includes(ele)\n      );\n      return this.nowTagValue === item[this.pathKey] || groupFlag;\n    },\n    vaildRoles(item) {\n      item.meta = item.meta || {};\n      return item.meta.roles ? item.meta.roles.includes(this.roles) : true;\n    },\n    validatenull(val) {\n      return validatenull(val);\n    },\n    open(item) {\n      if (this.screen <= 1) this.$store.commit(\"SET_COLLAPSE\");\n      this.$router.$avueRouter.group = item.group;\n      this.$router.push({\n        path: this.$router.$avueRouter.getPath({\n          name: item[this.labelKey],\n          src: item[this.pathKey]\n        }),\n        query: item.query\n      });\n    }\n  }\n};\n",{"version":3,"sources":["sidebarItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sidebarItem.vue","sourceRoot":"src/page/index/sidebar","sourcesContent":["<template>\n  <div class=\"menu-wrapper\">\n    <template v-for=\"item in menu\">\n      <el-menu-item v-if=\"validatenull(item[childrenKey]) && vaildRoles(item)\"\n                    :index=\"item[pathKey]\"\n                    @click=\"open(item)\"\n                    :key=\"item[labelKey]\"\n                    :class=\"{'is-active':vaildAvtive(item)}\">\n        <i :class=\"item[iconKey]\"></i>\n        <span slot=\"title\"\n              :alt=\"item[pathKey]\">{{item[labelKey]}}</span>\n      </el-menu-item>\n      <el-submenu v-else-if=\"!validatenull(item[childrenKey])&&vaildRoles(item)\"\n                  :index=\"item[pathKey]== null?'':item[pathKey]\"\n                  :key=\"item[labelKey]\">\n        <template slot=\"title\">\n          <i :class=\"item[iconKey]\"></i>\n          <span slot=\"title\"\n                :class=\"{'el-menu--display':collapse && first}\">{{item[labelKey]}}</span>\n        </template>\n        <template v-for=\"(child,cindex) in item[childrenKey]\">\n          <el-menu-item :index=\"child[pathKey],cindex\"\n                        @click=\"open(child)\"\n                        :class=\"{'is-active':vaildAvtive(child)}\"\n                        v-if=\"validatenull(child[childrenKey])\"\n                        :key=\"child[labelKey]\">\n            <i :class=\"child[iconKey]\"></i>\n            <span slot=\"title\">{{child[labelKey]}}</span>\n          </el-menu-item>\n          <sidebar-item v-else\n                        :menu=\"[child]\"\n                        :key=\"cindex\"\n                        :props=\"props\"\n                        :screen=\"screen\"\n                        :collapse=\"collapse\"></sidebar-item>\n        </template>\n      </el-submenu>\n    </template>\n  </div>\n</template>\n<script>\nimport { mapGetters } from \"vuex\";\nimport { validatenull } from \"@/util/validate\";\nimport config from \"./config.js\";\nexport default {\n  name: \"sidebarItem\",\n  data() {\n    return {\n      config: config\n    };\n  },\n  props: {\n    menu: {\n      type: Array\n    },\n    screen: {\n      type: Number\n    },\n    first: {\n      type: Boolean,\n      default: false\n    },\n    props: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    collapse: {\n      type: Boolean\n    }\n  },\n  created() {},\n  mounted() {},\n  computed: {\n    ...mapGetters([\"roles\"]),\n    labelKey() {\n      return this.props.label || this.config.propsDefault.label;\n    },\n    pathKey() {\n      return this.props.path || this.config.propsDefault.path;\n    },\n    iconKey() {\n      return this.props.icon || this.config.propsDefault.icon;\n    },\n    childrenKey() {\n      return this.props.children || this.config.propsDefault.children;\n    },\n    nowTagValue() {\n      return this.$router.$avueRouter.getValue(this.$route);\n    }\n  },\n  methods: {\n    vaildAvtive(item) {\n      const groupFlag = (item[\"group\"] || []).some(ele =>\n        this.$route.path.includes(ele)\n      );\n      return this.nowTagValue === item[this.pathKey] || groupFlag;\n    },\n    vaildRoles(item) {\n      item.meta = item.meta || {};\n      return item.meta.roles ? item.meta.roles.includes(this.roles) : true;\n    },\n    validatenull(val) {\n      return validatenull(val);\n    },\n    open(item) {\n      if (this.screen <= 1) this.$store.commit(\"SET_COLLAPSE\");\n      this.$router.$avueRouter.group = item.group;\n      this.$router.push({\n        path: this.$router.$avueRouter.getPath({\n          name: item[this.labelKey],\n          src: item[this.pathKey]\n        }),\n        query: item.query\n      });\n    }\n  }\n};\n</script>\n\n"]}]}