{"remainingRequest":"E:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\intellij work\\micro-ui\\src\\views\\admin\\role\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\intellij work\\micro-ui\\src\\views\\admin\\role\\index.vue","mtime":1552876440291},{"path":"E:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {addObj, delObj, fetchList, fetchRoleTree, getObj, permissionUpd, putObj,updateRoleMenu,fetchRoleMenuScope} from '@/api/admin/role'\nimport {tableOption} from '@/const/crud/admin/role'\nimport {fetchMenuTree} from '@/api/admin/menu'\nimport {remote} from \"@/api/admin/dict\";\nimport {fetchDeptTree, fetchTree} from \"@/api/admin/dept\";\nimport {mapGetters} from 'vuex'\nexport default {\n    name: 'table_role',\n    data() {\n        return {\n            tableOption: tableOption,\n            dsScopeData: [],\n            definedDeptData: [],\n            treeData: [],\n            checkedKeys: [],\n            checkedDsScope: [],\n            definedLevelId: [],\n            defaultProps: {\n                label: \"name\",\n                value: 'id'\n            },\n            deptTreeProps:{\n                label: \"name\",\n                value: 'code'\n            },\n            dictProps: {\n                label: \"label\",\n                value: 'value'\n            },\n            page: {\n                total: 0, // 总页数\n                currentPage: 1, // 当前页数\n                pageSize: 20 // 每页显示多少条\n            },\n            menuIds: '',\n            list: [],\n            listLoading: true,\n            form: {},\n            buttonUpdate: '',\n            definedForm: {\n                levelId: '',\n                tempMenuId: '',\n                tempDeptId: [],\n                menuPermission:''\n            },\n            treeDeptData: [],\n            dictData: {\n            },\n            dictScopeData:{},\n            scopeMenuInfo: new Map(),\n            scopeMenuInfoChange:0,\n            roleId: undefined,\n            roleCode: undefined,\n            rolesOptions: undefined,\n            dialogPermissionVisible: false,\n            roleManager_btn_add: false,\n            roleManager_btn_edit: false,\n            roleManager_btn_del: false,\n            roleManager_btn_perm: false,\n            dialogDefinedPermission: false\n        }\n    },\n    created() {\n        this.roleManager_btn_add = this.permissions['sys_role_add']\n        this.roleManager_btn_edit = this.permissions['sys_role_edit']\n        this.roleManager_btn_del = this.permissions['sys_role_del']\n        this.roleManager_btn_perm = this.permissions['sys_role_perm']\n\n        remote('data_scope').then(response => {\n            this.dictData = response.data.data\n            if(this.isAdmin==true){\n                this.dictScopeData = response.data.data\n                return ;\n            }\n             let type=this.userRole.dsType\n             let tempDict=[]\n            switch(type){\n                case \"0\":\n                    this.dictScopeData = response.data.data\n                    break;\n                case \"1\":\n                    for(let dict of response.data.data){\n                        if(dict.value > 0){\n                            tempDict.push(dict);\n                        }\n                    }\n                    this.dictScopeData=tempDict;\n                    break;\n                case \"2\":\n                    for(let dict of response.data.data){\n                        if(dict.value > 1){\n                            tempDict.push(dict);\n                        }\n                    }\n                    this.dictScopeData=tempDict;\n                    break;\n                case \"3\":\n                    for(let dict of response.data.data){\n                        if(dict.value > 2){\n                            tempDict.push(dict);\n                        }\n                    }\n                    this.dictScopeData=tempDict;\n                    break;\n                case \"4\":\n                    let level=this.userRole.codeLevel;\n                    switch (level) {\n                        case '0':\n                            for(let dict of response.data.data){\n                                if(dict.value > 0){\n                                    tempDict.push(dict);\n                                }\n                            }\n                            this.dictScopeData=tempDict;\n                            break;\n                        case '1':\n                            for(let dict of response.data.data){\n                                if(dict.value > 0){\n                                    tempDict.push(dict);\n                                }\n                            }\n                            this.dictScopeData=tempDict;\n                            break;\n                        case '2':\n                            for(let dict of response.data.data){\n                                if(dict.value > 1){\n                                    tempDict.push(dict);\n                                }\n                            }\n                            this.dictScopeData=tempDict;\n                        default:\n                            for(let dict of response.data.data){\n                                if(dict.value > 3){\n                                    tempDict.push(dict);\n                                }\n                            }\n                            this.dictScopeData=tempDict;\n                          break;\n\n\n                    }\n                    break;\n\n                default:\n                    for(let dict of response.data.data){\n                        if(dict.value > 3){\n                            tempDict.push(dict);\n                        }\n                    }\n                    this.dictScopeData=tempDict;\n            }\n        })\n\n\n    },\n\n    computed: {\n        ...mapGetters(['elements', 'permissions',\"userInfo\",\"userRole\",\"userDept\",\"isAdmin\"]),\n\n    },\n    methods: {\n        showHideDdl:function(lockUp,userId){\n            if(lockUp ==='0'){\n                if(userId===this.userInfo.userId||this.isAdmin==true){\n                    return true;\n                }\n                return false;\n            }\n           return true;\n        },\n        addMap:function(key,value){\n            this.scopeMenuInfo.set(\"menu_\"+key,value)\n            this.scopeMenuInfoChange +=1\n        },\n        deleteMap:function(key){\n            this.scopeMenuInfo.delete(\"menu_\"+key)\n            this.scopeMenuInfoChange +=1\n        },\n        clearMap:function(){\n          this.scopeMenuInfoChange=0\n          this.scopeMenuInfo.clear()\n            this.definedLevelId=[]\n        },\n        getList(page, params) {\n            this.listLoading = true\n            fetchList(Object.assign({\n                current: page.currentPage,\n                size: page.pageSize\n            }, params)).then(response => {\n                this.list = response.data.data.records\n                this.page.total = response.data.data.total\n                this.listLoading = false\n            })\n        },\n        exitScope:function(menuId){\n          return this.scopeMenuInfo.has(\"menu_\"+menuId)\n        },\n        handleRefreshChange() {\n            this.getList(this.page)\n        },\n        handleFilter(param) {\n            this.page.page = 1;\n            this.getList(this.page, param);\n        },\n        handleCreate() {\n            this.$refs.crud.rowAdd();\n        },\n        handleOpenBefore(show, type) {\n            this.handleDept();\n            fetchTree().then(response => {\n                this.dsScopeData = response.data.data;\n                if (this.form.dsScope) {\n                    this.checkedDsScope = (this.form.dsScope).split(\",\")\n                } else {\n                    this.checkedDsScope = []\n                }\n            });\n            show();\n        },\n        handleUpdate(row, index) {\n            this.$refs.crud.rowEdit(row, index);\n        },\n        handlePermission(row) {\n\n            this.clearMap();\n            fetchRoleMenuScope(row.roleId).then(response => {\n                let menuScope=response.data;\n                if(typeof (menuScope)!=\"undefined\" ){\n                    for(let ms of menuScope){\n                        let  scopeMenu = {};\n                        scopeMenu['menuId'] = ms.menuId\n                        scopeMenu['dsType'] = ms.dsType\n                        scopeMenu['dsScope'] = ms.dsScope\n                        scopeMenu['permission']=ms.permission\n                        scopeMenu['label'] = ''\n                        this.dictData.forEach(function(obj){\n                            if(obj.value===scopeMenu['dsType']){\n                                scopeMenu['label'] = obj.label\n                                return\n                            }\n                        })\n                        this.addMap(ms.menuId, scopeMenu);\n                    }\n                }\n            });\n\n            fetchRoleTree(row.roleId)\n                .then(response => {\n                    this.checkedKeys = response.data\n                    return fetchMenuTree()\n                })\n                .then(response => {\n                    this.treeData = response.data.data\n\n                    // 解析出所有的太监节点\n                    this.checkedKeys = this.resolveAllEunuchNodeId(this.treeData, this.checkedKeys, [])\n                    this.dialogStatus = 'permission'\n                    this.dialogPermissionVisible = true\n                    this.roleId = row.roleId\n                    this.roleCode = row.roleCode\n                });\n\n\n\n\n        },\n        /**\n         * 解析出所有的太监节点id\n         * @param json 待解析的json串\n         * @param idArr 原始节点数组\n         * @param temp 临时存放节点id的数组\n         * @return 太监节点id数组\n         */\n        resolveAllEunuchNodeId(json, idArr, temp) {\n            for (let i = 0; i < json.length; i++) {\n                const item = json[i]\n                // 存在子节点，递归遍历;不存在子节点，将json的id添加到临时数组中\n                if (item.children && item.children.length !== 0) {\n                    this.resolveAllEunuchNodeId(item.children, idArr, temp)\n                } else {\n                    temp.push(idArr.filter(id => id === item.id))\n                }\n            }\n            return temp\n        },\n        filterNode(value, data) {\n            if (!value) return true\n            return data.label.indexOf(value) !== -1\n        },\n        getNodeData(data, done) {\n            done();\n        },\n        handleDelete(row, index) {\n            var _this = this\n            this.$confirm('是否确认删除名称为\"' + row.roleName + '\"' + '\"的数据项?', '警告', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(function () {\n                return delObj(row.roleId)\n            }).then(() => {\n                this.getList(this.page)\n                this.list.splice(index, 1);\n                _this.$message({\n                    showClose: true,\n                    message: '删除成功',\n                    type: 'success'\n                })\n            }).catch(function () {\n            })\n        },\n        create(row, done, loading) {\n            if (this.form.dsType === 1) {\n                this.form.dsScope = this.$refs.scopeTree.getCheckedKeys().join(',')\n            }\n            addObj(this.form).then(() => {\n                this.getList(this.page)\n                done();\n                this.$notify({\n                    title: '成功',\n                    message: '创建成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            }).catch(() => {\n                loading();\n            });\n        },\n        update(row, index, done, loading) {\n            if (this.form.dsType === '7') {\n                this.form.dsScope = this.$refs.scopeTree.getCheckedKeys().join(',')\n            }\n            putObj(this.form).then(() => {\n                this.getList(this.page)\n                done();\n                this.$notify({\n                    title: '成功',\n                    message: '修改成功',\n                    type: 'success',\n                    duration: 2000\n                })\n            }).catch(() => {\n                loading();\n            });\n        },\n        updatePermession(roleId, roleCode) {\n            this.menuIds = ''\n            this.menuIds = this.$refs.menuTree.getCheckedKeys().join(',').concat(',').concat(this.$refs.menuTree.getHalfCheckedKeys().join(','))\n            let defineForm ={}\n            let nodes =new Array();\n            for(let value of this.scopeMenuInfo.values()){\n                nodes.push(JSON.parse(JSON.stringify(value)));\n            }\n            defineForm['menuIds']=this.menuIds\n            defineForm['roleId']=roleId\n            defineForm['roleMenuScopeList']=nodes\n            updateRoleMenu(defineForm).then(() => {\n                this.dialogPermissionVisible = false\n                fetchMenuTree()\n                    .then(response => {\n                        this.form = response.data.data\n                        return fetchRoleTree(roleId)\n                    })\n                    .then(response => {\n                        this.checkedKeys = response.data\n                        this.$notify({\n                            title: '成功',\n                            message: '修改成功',\n                            type: 'success',\n                            duration: 2000\n                        })\n                    })\n            })\n        },\n        definedDataScope(id,permission) {\n            this.dialogDefinedPermission = true\n            this.definedForm.tempMenuId = id\n            this.definedForm.menuPermission=permission\n            let scopeMenu=this.scopeMenuInfo.get(\"menu_\"+id);\n            if(scopeMenu&&typeof (scopeMenu)!=\"undefined\"){\n                this.definedForm.levelId=scopeMenu.dsType\n                if(this.definedForm.levelId==='7' && scopeMenu.dsScope ){\n                    this.definedLevelId=scopeMenu.dsScope.split(',')\n                }else{\n                    this.definedLevelId=[]\n                }\n\n            }else{\n                this.definedForm.levelId=''\n            }\n            if (this.definedDeptData) {\n                fetchTree().then(response => {\n                    this.definedDeptData = response.data.data;\n                });\n            }\n        },\n        clearDefinedDataScope(menuId){\n            this.deleteMap(menuId)\n        },\n        saveDefinedDataScope() {\n            if (this.definedForm.levelId === '7') {\n                this.definedForm.tempDeptId = this.$refs.definedTree.getCheckedKeys().join(',')\n                this.definedLevelId = this.$refs.definedTree.getCheckedKeys();\n            }else{\n                this.definedForm.tempDeptId=''\n                this.definedLevelId=[]\n            }\n\n            var  scopeMenu = {};\n            scopeMenu['menuId'] = this.definedForm.tempMenuId\n            scopeMenu['dsType'] = this.definedForm.levelId\n            scopeMenu['dsScope'] = this.definedForm.tempDeptId\n            scopeMenu['label'] = ''\n            scopeMenu['permission']=this.definedForm.menuPermission\n            this.dictData.forEach(function(obj){\n               if(obj.value===scopeMenu['dsType']){\n                   scopeMenu['label'] = obj.label\n                   return\n               }\n            })\n            this.addMap(this.definedForm.tempMenuId, scopeMenu);\n            this.dialogDefinedPermission = false\n\n        },\n\n        handleDept() {\n            fetchTree().then(response => {\n                this.treeDeptData = response.data.data;\n            });\n        },\n\n    getDictLabel(value){\n        let label='未定义'\n        for(let dict of this.dictData){\n            if(dict.value === value){\n                label=dict.label;\n                return label\n            }\n        }\n\n        return label;\n    }\n    ,\n        getLevelLabel(menuId) {\n            let butText = '自定义';\n            let x = this.scopeMenuInfoChange;\n            let menuInfo = this.scopeMenuInfo.get(\"menu_\"+menuId);\n            if (typeof (menuInfo)!=\"undefined\" && null!=menuInfo) {\n                butText = menuInfo.label;\n            }\n            return \"&nbsp;&nbsp;\" + butText;\n        }\n\n    }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"index.vue","sourceRoot":"src/views/admin/role","sourcesContent":["<template>\n    <div class=\"app-container calendar-list-container\">\n        <basic-container>\n            <avue-crud :option=\"tableOption\"\n                       :data=\"list\"\n                       ref=\"crud\"\n                       :page=\"page\"\n                       v-model=\"form\"\n                       :table-loading=\"listLoading\"\n                       :before-open=\"handleOpenBefore\"\n                       @on-load=\"getList\"\n                       @search-change=\"handleFilter\"\n                       @refresh-change=\"handleRefreshChange\"\n                       @row-update=\"update\"\n                       @row-save=\"create\">\n\n                <template slot=\"dsType\"\n                          slot-scope=\"scope\">\n              <span >\n                <el-tag>{{getDictLabel(scope.row.dsType)}} </el-tag>\n              </span>\n                </template>\n                <template slot=\"menuLeft\">\n                    <el-button v-if=\"roleManager_btn_add\"\n                               class=\"filter-item\"\n                               @click=\"handleCreate\"\n                               size=\"small\"\n                               type=\"primary\"\n                               icon=\"el-icon-edit\">添加\n                    </el-button>\n                </template>\n                <template slot=\"dsTypeForm\" slot-scope=\"scope\">\n                    <avue-select v-model=\"form.dsType\"\n                                 placeholder=\"请选择数据权限\"\n                                 :dic=\"dictScopeData\"\n                                 :props=\"dictProps\"></avue-select>\n\n\n\n                </template>\n\n                <template slot=\"dsScopeForm\" slot-scope=\"scope\">\n                    <div v-if=\"form.dsType == 7\">\n                        <el-tree class=\"filter-tree\"\n                                 :data=\"dsScopeData\"\n                                 :check-strictly=\"true\"\n                                 node-key=\"code\"\n                                 highlight-current\n                                 :props=\"deptTreeProps\"\n                                 ref=\"scopeTree\"\n                                 :default-checked-keys=\"checkedDsScope\"\n                                 show-checkbox>\n                        </el-tree>\n                    </div>\n                </template>\n\n\n                <template slot=\"menu\"\n                          slot-scope=\"scope\" >\n                    <label v-if=\"showHideDdl(scope.row.lockUp,scope.row.updateBy)\" style=\"padding-left: 10px\">\n                    <el-button size=\"mini\"\n                               type=\"text\"\n                               icon=\"el-icon-edit\"\n                               v-if=\"roleManager_btn_edit\"\n                               @click=\"handleUpdate(scope.row,scope.index)\">编辑\n                    </el-button>\n                    <el-button size=\"mini\"\n                               type=\"text\"\n                               icon=\"el-icon-delete\"\n                               v-if=\"roleManager_btn_del\"\n                               @click=\"handleDelete(scope.row,scope.index)\">删除\n                    </el-button>\n                    <el-button size=\"mini\"\n                               type=\"text\"\n                               icon=\"el-icon-plus\"\n                               plain\n                               @click=\"handlePermission(scope.row,scope.index)\"\n                               v-if=\"roleManager_btn_perm\">权限\n                    </el-button>\n                    </label>\n                </template>\n            </avue-crud>\n        </basic-container>\n        <el-dialog title=\"分配权限\"\n                   :visible.sync=\"dialogPermissionVisible\">\n            <el-tree class=\"filter-tree\"\n                     :data=\"treeData\"\n                     :default-checked-keys=\"checkedKeys\"\n                     :check-strictly=\"false\"\n                     node-key=\"id\"\n                     highlight-current\n                     :props=\"defaultProps\"\n                     show-checkbox\n                     ref=\"menuTree\"\n                     :filter-node-method=\"filterNode\"\n            >\n      <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n        <span>{{ node.label }}</span>\n        <span v-if=\" data.permission \" v-show=\"node.checked\">\n          <el-button type=\"text\" size=\"mini\" @click=\"definedDataScope(data.id,data.permission)\">\n              <span v-html=\"getLevelLabel(data.id)\"></span>\n          </el-button>\n           <el-button v-if=\"exitScope(data.id)\" type=\"text\" size=\"mini\" style=\"color: red\" @click=\"clearDefinedDataScope(data.id)\">\n               &nbsp;&nbsp;清除\n           </el-button>\n\n        </span>\n      </span>\n            </el-tree>\n            <div slot=\"footer\"\n                 class=\"dialog-footer\">\n                <el-button type=\"primary\" ref=\"buttonUpdate\"\n                           @click=\"updatePermession(roleId, roleCode)\">更 新\n                </el-button>\n            </div>\n        </el-dialog>\n        <el-dialog title=\"自定义菜单数据权限\" :visible.sync=\"dialogDefinedPermission\">\n            <el-form v-model=\"definedForm\">\n\n                <el-form-item label=\"数据权限\" prop=\"levelId\">\n                    <el-select v-model=\"definedForm.levelId\" placeholder=\"请选择权限级别\">\n                        <el-option v-for=\"dict in dictScopeData\" :label=\"dict.label\" :value=\"dict.value\" :key=\"dict.value\"/>\n                    </el-select>\n                </el-form-item>\n                <el-form-item>\n                    <div v-if=\"definedForm.levelId == 7\">\n                        <el-tree class=\"filter-tree\"\n                                 :data=\"definedDeptData\"\n                                 :check-strictly=\"true\"\n                                 node-key=\"code\"\n                                 highlight-current\n                                 :props=\"deptTreeProps\"\n                                 ref=\"definedTree\"\n                                 :default-checked-keys=\"definedLevelId\"\n                                 :filter-node-method=\"filterNode\"\n                                 show-checkbox>\n                        </el-tree>\n\n                    </div>\n\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\"\n                 class=\"dialog-footer\">\n                <el-button type=\"primary\" @click=\"saveDefinedDataScope\">确 定\n                </el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\n    import {addObj, delObj, fetchList, fetchRoleTree, getObj, permissionUpd, putObj,updateRoleMenu,fetchRoleMenuScope} from '@/api/admin/role'\n    import {tableOption} from '@/const/crud/admin/role'\n    import {fetchMenuTree} from '@/api/admin/menu'\n    import {remote} from \"@/api/admin/dict\";\n    import {fetchDeptTree, fetchTree} from \"@/api/admin/dept\";\n    import {mapGetters} from 'vuex'\n    export default {\n        name: 'table_role',\n        data() {\n            return {\n                tableOption: tableOption,\n                dsScopeData: [],\n                definedDeptData: [],\n                treeData: [],\n                checkedKeys: [],\n                checkedDsScope: [],\n                definedLevelId: [],\n                defaultProps: {\n                    label: \"name\",\n                    value: 'id'\n                },\n                deptTreeProps:{\n                    label: \"name\",\n                    value: 'code'\n                },\n                dictProps: {\n                    label: \"label\",\n                    value: 'value'\n                },\n                page: {\n                    total: 0, // 总页数\n                    currentPage: 1, // 当前页数\n                    pageSize: 20 // 每页显示多少条\n                },\n                menuIds: '',\n                list: [],\n                listLoading: true,\n                form: {},\n                buttonUpdate: '',\n                definedForm: {\n                    levelId: '',\n                    tempMenuId: '',\n                    tempDeptId: [],\n                    menuPermission:''\n                },\n                treeDeptData: [],\n                dictData: {\n                },\n                dictScopeData:{},\n                scopeMenuInfo: new Map(),\n                scopeMenuInfoChange:0,\n                roleId: undefined,\n                roleCode: undefined,\n                rolesOptions: undefined,\n                dialogPermissionVisible: false,\n                roleManager_btn_add: false,\n                roleManager_btn_edit: false,\n                roleManager_btn_del: false,\n                roleManager_btn_perm: false,\n                dialogDefinedPermission: false\n            }\n        },\n        created() {\n            this.roleManager_btn_add = this.permissions['sys_role_add']\n            this.roleManager_btn_edit = this.permissions['sys_role_edit']\n            this.roleManager_btn_del = this.permissions['sys_role_del']\n            this.roleManager_btn_perm = this.permissions['sys_role_perm']\n\n            remote('data_scope').then(response => {\n                this.dictData = response.data.data\n                if(this.isAdmin==true){\n                    this.dictScopeData = response.data.data\n                    return ;\n                }\n                 let type=this.userRole.dsType\n                 let tempDict=[]\n                switch(type){\n                    case \"0\":\n                        this.dictScopeData = response.data.data\n                        break;\n                    case \"1\":\n                        for(let dict of response.data.data){\n                            if(dict.value > 0){\n                                tempDict.push(dict);\n                            }\n                        }\n                        this.dictScopeData=tempDict;\n                        break;\n                    case \"2\":\n                        for(let dict of response.data.data){\n                            if(dict.value > 1){\n                                tempDict.push(dict);\n                            }\n                        }\n                        this.dictScopeData=tempDict;\n                        break;\n                    case \"3\":\n                        for(let dict of response.data.data){\n                            if(dict.value > 2){\n                                tempDict.push(dict);\n                            }\n                        }\n                        this.dictScopeData=tempDict;\n                        break;\n                    case \"4\":\n                        let level=this.userRole.codeLevel;\n                        switch (level) {\n                            case '0':\n                                for(let dict of response.data.data){\n                                    if(dict.value > 0){\n                                        tempDict.push(dict);\n                                    }\n                                }\n                                this.dictScopeData=tempDict;\n                                break;\n                            case '1':\n                                for(let dict of response.data.data){\n                                    if(dict.value > 0){\n                                        tempDict.push(dict);\n                                    }\n                                }\n                                this.dictScopeData=tempDict;\n                                break;\n                            case '2':\n                                for(let dict of response.data.data){\n                                    if(dict.value > 1){\n                                        tempDict.push(dict);\n                                    }\n                                }\n                                this.dictScopeData=tempDict;\n                            default:\n                                for(let dict of response.data.data){\n                                    if(dict.value > 3){\n                                        tempDict.push(dict);\n                                    }\n                                }\n                                this.dictScopeData=tempDict;\n                              break;\n\n\n                        }\n                        break;\n\n                    default:\n                        for(let dict of response.data.data){\n                            if(dict.value > 3){\n                                tempDict.push(dict);\n                            }\n                        }\n                        this.dictScopeData=tempDict;\n                }\n            })\n\n\n        },\n\n        computed: {\n            ...mapGetters(['elements', 'permissions',\"userInfo\",\"userRole\",\"userDept\",\"isAdmin\"]),\n\n        },\n        methods: {\n            showHideDdl:function(lockUp,userId){\n                if(lockUp ==='0'){\n                    if(userId===this.userInfo.userId||this.isAdmin==true){\n                        return true;\n                    }\n                    return false;\n                }\n               return true;\n            },\n            addMap:function(key,value){\n                this.scopeMenuInfo.set(\"menu_\"+key,value)\n                this.scopeMenuInfoChange +=1\n            },\n            deleteMap:function(key){\n                this.scopeMenuInfo.delete(\"menu_\"+key)\n                this.scopeMenuInfoChange +=1\n            },\n            clearMap:function(){\n              this.scopeMenuInfoChange=0\n              this.scopeMenuInfo.clear()\n                this.definedLevelId=[]\n            },\n            getList(page, params) {\n                this.listLoading = true\n                fetchList(Object.assign({\n                    current: page.currentPage,\n                    size: page.pageSize\n                }, params)).then(response => {\n                    this.list = response.data.data.records\n                    this.page.total = response.data.data.total\n                    this.listLoading = false\n                })\n            },\n            exitScope:function(menuId){\n              return this.scopeMenuInfo.has(\"menu_\"+menuId)\n            },\n            handleRefreshChange() {\n                this.getList(this.page)\n            },\n            handleFilter(param) {\n                this.page.page = 1;\n                this.getList(this.page, param);\n            },\n            handleCreate() {\n                this.$refs.crud.rowAdd();\n            },\n            handleOpenBefore(show, type) {\n                this.handleDept();\n                fetchTree().then(response => {\n                    this.dsScopeData = response.data.data;\n                    if (this.form.dsScope) {\n                        this.checkedDsScope = (this.form.dsScope).split(\",\")\n                    } else {\n                        this.checkedDsScope = []\n                    }\n                });\n                show();\n            },\n            handleUpdate(row, index) {\n                this.$refs.crud.rowEdit(row, index);\n            },\n            handlePermission(row) {\n\n                this.clearMap();\n                fetchRoleMenuScope(row.roleId).then(response => {\n                    let menuScope=response.data;\n                    if(typeof (menuScope)!=\"undefined\" ){\n                        for(let ms of menuScope){\n                            let  scopeMenu = {};\n                            scopeMenu['menuId'] = ms.menuId\n                            scopeMenu['dsType'] = ms.dsType\n                            scopeMenu['dsScope'] = ms.dsScope\n                            scopeMenu['permission']=ms.permission\n                            scopeMenu['label'] = ''\n                            this.dictData.forEach(function(obj){\n                                if(obj.value===scopeMenu['dsType']){\n                                    scopeMenu['label'] = obj.label\n                                    return\n                                }\n                            })\n                            this.addMap(ms.menuId, scopeMenu);\n                        }\n                    }\n                });\n\n                fetchRoleTree(row.roleId)\n                    .then(response => {\n                        this.checkedKeys = response.data\n                        return fetchMenuTree()\n                    })\n                    .then(response => {\n                        this.treeData = response.data.data\n\n                        // 解析出所有的太监节点\n                        this.checkedKeys = this.resolveAllEunuchNodeId(this.treeData, this.checkedKeys, [])\n                        this.dialogStatus = 'permission'\n                        this.dialogPermissionVisible = true\n                        this.roleId = row.roleId\n                        this.roleCode = row.roleCode\n                    });\n\n\n\n\n            },\n            /**\n             * 解析出所有的太监节点id\n             * @param json 待解析的json串\n             * @param idArr 原始节点数组\n             * @param temp 临时存放节点id的数组\n             * @return 太监节点id数组\n             */\n            resolveAllEunuchNodeId(json, idArr, temp) {\n                for (let i = 0; i < json.length; i++) {\n                    const item = json[i]\n                    // 存在子节点，递归遍历;不存在子节点，将json的id添加到临时数组中\n                    if (item.children && item.children.length !== 0) {\n                        this.resolveAllEunuchNodeId(item.children, idArr, temp)\n                    } else {\n                        temp.push(idArr.filter(id => id === item.id))\n                    }\n                }\n                return temp\n            },\n            filterNode(value, data) {\n                if (!value) return true\n                return data.label.indexOf(value) !== -1\n            },\n            getNodeData(data, done) {\n                done();\n            },\n            handleDelete(row, index) {\n                var _this = this\n                this.$confirm('是否确认删除名称为\"' + row.roleName + '\"' + '\"的数据项?', '警告', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(function () {\n                    return delObj(row.roleId)\n                }).then(() => {\n                    this.getList(this.page)\n                    this.list.splice(index, 1);\n                    _this.$message({\n                        showClose: true,\n                        message: '删除成功',\n                        type: 'success'\n                    })\n                }).catch(function () {\n                })\n            },\n            create(row, done, loading) {\n                if (this.form.dsType === 1) {\n                    this.form.dsScope = this.$refs.scopeTree.getCheckedKeys().join(',')\n                }\n                addObj(this.form).then(() => {\n                    this.getList(this.page)\n                    done();\n                    this.$notify({\n                        title: '成功',\n                        message: '创建成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                }).catch(() => {\n                    loading();\n                });\n            },\n            update(row, index, done, loading) {\n                if (this.form.dsType === '7') {\n                    this.form.dsScope = this.$refs.scopeTree.getCheckedKeys().join(',')\n                }\n                putObj(this.form).then(() => {\n                    this.getList(this.page)\n                    done();\n                    this.$notify({\n                        title: '成功',\n                        message: '修改成功',\n                        type: 'success',\n                        duration: 2000\n                    })\n                }).catch(() => {\n                    loading();\n                });\n            },\n            updatePermession(roleId, roleCode) {\n                this.menuIds = ''\n                this.menuIds = this.$refs.menuTree.getCheckedKeys().join(',').concat(',').concat(this.$refs.menuTree.getHalfCheckedKeys().join(','))\n                let defineForm ={}\n                let nodes =new Array();\n                for(let value of this.scopeMenuInfo.values()){\n                    nodes.push(JSON.parse(JSON.stringify(value)));\n                }\n                defineForm['menuIds']=this.menuIds\n                defineForm['roleId']=roleId\n                defineForm['roleMenuScopeList']=nodes\n                updateRoleMenu(defineForm).then(() => {\n                    this.dialogPermissionVisible = false\n                    fetchMenuTree()\n                        .then(response => {\n                            this.form = response.data.data\n                            return fetchRoleTree(roleId)\n                        })\n                        .then(response => {\n                            this.checkedKeys = response.data\n                            this.$notify({\n                                title: '成功',\n                                message: '修改成功',\n                                type: 'success',\n                                duration: 2000\n                            })\n                        })\n                })\n            },\n            definedDataScope(id,permission) {\n                this.dialogDefinedPermission = true\n                this.definedForm.tempMenuId = id\n                this.definedForm.menuPermission=permission\n                let scopeMenu=this.scopeMenuInfo.get(\"menu_\"+id);\n                if(scopeMenu&&typeof (scopeMenu)!=\"undefined\"){\n                    this.definedForm.levelId=scopeMenu.dsType\n                    if(this.definedForm.levelId==='7' && scopeMenu.dsScope ){\n                        this.definedLevelId=scopeMenu.dsScope.split(',')\n                    }else{\n                        this.definedLevelId=[]\n                    }\n\n                }else{\n                    this.definedForm.levelId=''\n                }\n                if (this.definedDeptData) {\n                    fetchTree().then(response => {\n                        this.definedDeptData = response.data.data;\n                    });\n                }\n            },\n            clearDefinedDataScope(menuId){\n                this.deleteMap(menuId)\n            },\n            saveDefinedDataScope() {\n                if (this.definedForm.levelId === '7') {\n                    this.definedForm.tempDeptId = this.$refs.definedTree.getCheckedKeys().join(',')\n                    this.definedLevelId = this.$refs.definedTree.getCheckedKeys();\n                }else{\n                    this.definedForm.tempDeptId=''\n                    this.definedLevelId=[]\n                }\n\n                var  scopeMenu = {};\n                scopeMenu['menuId'] = this.definedForm.tempMenuId\n                scopeMenu['dsType'] = this.definedForm.levelId\n                scopeMenu['dsScope'] = this.definedForm.tempDeptId\n                scopeMenu['label'] = ''\n                scopeMenu['permission']=this.definedForm.menuPermission\n                this.dictData.forEach(function(obj){\n                   if(obj.value===scopeMenu['dsType']){\n                       scopeMenu['label'] = obj.label\n                       return\n                   }\n                })\n                this.addMap(this.definedForm.tempMenuId, scopeMenu);\n                this.dialogDefinedPermission = false\n\n            },\n\n            handleDept() {\n                fetchTree().then(response => {\n                    this.treeDeptData = response.data.data;\n                });\n            },\n\n        getDictLabel(value){\n            let label='未定义'\n            for(let dict of this.dictData){\n                if(dict.value === value){\n                    label=dict.label;\n                    return label\n                }\n            }\n\n            return label;\n        }\n        ,\n            getLevelLabel(menuId) {\n                let butText = '自定义';\n                let x = this.scopeMenuInfoChange;\n                let menuInfo = this.scopeMenuInfo.get(\"menu_\"+menuId);\n                if (typeof (menuInfo)!=\"undefined\" && null!=menuInfo) {\n                    butText = menuInfo.label;\n                }\n                return \"&nbsp;&nbsp;\" + butText;\n            }\n\n        }\n    }\n</script>\n"]}]}