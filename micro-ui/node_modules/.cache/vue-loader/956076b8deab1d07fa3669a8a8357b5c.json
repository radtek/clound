{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\views\\portal\\unit\\standard\\metadata\\tableIndex.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\views\\portal\\unit\\standard\\metadata\\tableIndex.vue","mtime":1560132718232},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {fetchPreViewList,fetchTree,addObj, delObj, fetchList, getObj, putObj,checkDbConn} from \"@/api/portal/metadata/standardfields/table\";\nimport {tableOption,preViewOption,newVue} from '@/const/crud/portal/metadata/standardfields/table';\nimport {mapGetters} from \"vuex\";\n\nexport default {\n    name: \"table\",\n    data() {\n        return {\n            treeOption: {\n                nodeKey: 'id',\n                addBtn: false,\n                menu: false,\n                props: {\n                    label: 'label',\n                    value: 'value',\n                    children:'children'\n                }\n            },\n            preViewFlag:false,\n            treeData: [],\n            option: tableOption,\n            preViewOption: preViewOption,\n            checkedKeys: [],\n            tempDbId:undefined,\n            tempDbType:undefined,\n            page: {\n                total: 0, // 总页数\n                currentPage: 1, // 当前页数\n                pageSize: 10, // 每页显示多少条,\n                isAsc: false//是否倒序\n            },\n            preViewPage: {\n                total: 0, // 总页数\n                currentPage: 1, // 当前页数\n                pageSize: 10, // 每页显示多少条,\n                isAsc: false//是否倒序\n            },\n            list: [],\n            preViewData: [],\n            listLoading: true,\n            preViewlistLoading: true,\n            form: {},\n            selData: [],\n            editId:\"\",\n        };\n    },\n    computed: {\n        ...mapGetters([\"permissions\"])\n    },\n\n    created() {\n        this.data_table_add = this.permissions[\"data_table_add\"];\n        this.data_table_edit = this.permissions[\"data_table_edit\"];\n        this.data_table_del = this.permissions[\"data_table_del\"];\n        newVue.obj = this\n        this.init();\n    },\n    methods: {\n        init() {\n            fetchTree().then(response => {\n                this.treeData = response.data.data;\n            });\n        },\n        nodeClick(data) {\n            this.page.page = 1;\n            this.tempDbId=data.id;\n            this.tempDbType = data.value;\n            this.getList(this.page, {dbId: data.id,dbType:data.value});\n        },\n        getList(page, params) {\n            this.listLoading = true;\n            fetchList(Object.assign({\n                current: page.currentPage,\n                size: page.pageSize\n            }, params)).then(response => {\n                this.list = response.data.data.records;\n                this.page.total = response.data.data.total\n                this.listLoading = false;\n            });\n        },\n        getPreViewList(preViewPage, params) {\n            this.preViewData =[]\n           if(params === undefined ||params === null || params === '' ){\n               params ={dbId: this.tempDbId}\n           }\n            this.preViewlistLoading = true;\n            fetchPreViewList(Object.assign({\n                current: preViewPage.currentPage,\n                size: preViewPage.pageSize\n            }, params)).then(response => {\n                this.preViewData = response.data.data;\n                this.preViewPage.total = response.data.data.total\n                this.preViewlistLoading = false;\n            });\n            this.$refs.preViewCrud.selectClear();\n        },\n        handleFilter(param) {\n            this.page.page = 1;\n            param.dbId=this.tempDbId;\n            param.dbType=this.tempDbType\n            this.getList(this.page, param);\n        },\n        preHandleFilter(param) {\n            this.preViewPage.page = 1;\n            param.dbId=this.tempDbId;\n            param.dbType=this.tempDbType\n            this.getPreViewList(this.preViewPage, param);\n        },\n        handleRefreshChange() {\n            this.getList(this.page,{dbId: this.tempDbId,dbType:this.tempDbType})\n        },\n        preHandleRefreshChange() {\n            this.getPreViewList(this.preViewPage,{dbId: this.tempDbId,dbType:this.tempDbType})\n        },\n        handleOpenBefore(show, type) {\n            window.boxType = type;\n            this.form.dbId = this.form.dbName;\n            show();\n        },\n        handleUpdate(row, index) {\n            this.$refs.crud.rowEdit(row, index);\n            this.tempDbId = row.dbId\n            this.editId=row.id;\n        },\n        importTable() {\n            if(this.selData.length > 0){\n                this.$confirm('确认导入?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    let defineForm ={}\n                    var nodes = new Array();\n                    for(let i = 0; i < this.selData.length; i++){\n                        nodes.push(JSON.parse(JSON.stringify(this.selData[i])));\n                    }\n                    defineForm['dbId']=this.tempDbId\n                    defineForm['tableList']=nodes\n                    addObj(defineForm).then(() => {\n                        this.preViewFlag = false;\n                        this.getList(this.page,{dbId: this.tempDbId,dbType:this.tempDbType})\n                        this.$notify({\n                            title: \"成功\",\n                            message: \"导入成功\",\n                            type: \"success\",\n                            duration: 2000\n                        });\n                    })\n                })\n            }else {\n                this.$message({\n                    showClose: true,\n                    message: '请选择要导入的表',\n                    type: 'warning'\n                })\n            }\n        },\n        selectionChange(data){\n            this.selData = data\n        },\n        update(row, index, done, loading) {\n            putObj(this.form).then(() => {\n                this.getList(this.page);\n                done();\n                this.$notify({\n                    title: \"成功\",\n                    message: \"修改成功\",\n                    type: \"success\",\n                    duration: 2000\n                });\n            }).catch(() => {\n                loading();\n            });\n        },\n        deletes(row, index) {\n            this.$confirm(\n                \"此操作将永久删除该表(\" + row.name + \"), 是否继续?\",\n                \"提示\",\n                {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                }\n            ).then(() => {\n                delObj(row.id).then(() => {\n                    this.getList(this.page)\n                    this.$notify({\n                        title: \"成功\",\n                        message: \"删除成功\",\n                        type: \"success\",\n                        duration: 2000\n                    });\n                }).cache(() => {\n                    this.$notify({\n                        title: \"失败\",\n                        message: \"删除失败\",\n                        type: \"error\",\n                        duration: 2000\n                    });\n                });\n            });\n        },\n\n        handleFieldDetail(row, index){\n            this.$router.push({\n                path: this.$router.$avueRouter.getPath({\n                    name: \"字段编辑\",\n                    src: \"/portal/unit/standard/metadata\"\n                }),\n                query: {tbId: row.id,tbName:row.name,dbId:this.tempDbId}\n            });\n        },\n\n        isPreView:function () {\n            if(this.tempDbId===undefined){\n                return false;\n            }\n            if(this.tempDbType=='Oracle'||this.tempDbType=='MySql'||this.tempDbType=='SQLServer'||this.tempDbType=='DB2'){\n                return false;\n            }else{\n                return true;\n            }\n        },\n\n        preViewTest:function () {\n            checkDbConn(this.tempDbId).then(response => {\n                if(response.data.message===\"测试数据源连接成功\"){\n                    this.preViewFlag=true\n                    this.getPreViewList(this.preViewPage);\n                }else{\n                    this.$alert(response.data.message, '连接结果', {\n                        confirmButtonText: '确定',\n                        type: 'warning',\n                        callback: action => {\n                        },\n                    });\n                }\n\n            })\n\n        }\n\n    }\n};\n",{"version":3,"sources":["tableIndex.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"tableIndex.vue","sourceRoot":"src/views/portal/unit/standard/metadata","sourcesContent":["\n\n<template>\n    <div class=\"metadata\">\n        <basic-container>\n            <el-row :span=\"24\">\n                <el-col :xs=\"24\"\n                        :sm=\"24\"\n                        :md=\"5\"\n                        class=\"metadata__tree\">\n\n                    <avue-tree :option=\"treeOption\"\n                               :data=\"treeData\"\n                               @node-click=\"nodeClick\"></avue-tree>\n                </el-col>\n                <el-col :xs=\"24\"\n                        :sm=\"24\"\n                        :md=\"19\"\n                        class=\"metadata__main\">\n                    <avue-crud :option=\"option\"\n                               ref=\"crud\"\n                               v-model=\"form\"\n                               :page=\"page\"\n                               @on-load=\"getList\"\n                               @row-update=\"update\"\n                               :table-loading=\"listLoading\"\n                               @search-change=\"handleFilter\"\n                               @refresh-change=\"handleRefreshChange\"\n                               :before-open=\"handleOpenBefore\"\n                               :data=\"list\">\n                        <template slot=\"menuLeft\">\n                            <el-button v-if=\"isPreView()\"\n                                       @click=\"preViewTest()\"\n                                       size=\"small\"\n                                       type=\"primary\"\n                                       icon=\"el-icon-download\"\n                                       >预览导入\n                            </el-button>\n                        </template>\n\n                        <template slot=\"menu\"\n                                  slot-scope=\"scope\">\n                            <el-button v-if=\"data_table_edit\"\n                                       size=\"small\"\n                                       type=\"text\"\n                                       icon=\"el-icon-edit\"\n                                       @click=\"handleUpdate(scope.row,scope.index)\">编辑\n                            </el-button>\n                            <el-button v-if=\"data_table_del\"\n                                       size=\"small\"\n                                       type=\"text\"\n                                       icon=\"el-icon-delete\"\n                                       @click=\"deletes(scope.row,scope.index)\">删除\n                            </el-button>\n                            <el-button type=\"text\"\n                                       icon=\"el-icon-tickets\"\n                                       size=\"mini\"\n                                       plain\n                                       @click=\"handleFieldDetail(scope.row,scope.index)\">字段编辑\n                            </el-button>\n                        </template>\n\n                        <template slot=\"dbId\"\n                                  slot-scope=\"scope\">\n                            {{scope.row.dbName}}\n                        </template>\n                    </avue-crud>\n                </el-col>\n            </el-row>\n        </basic-container>\n\n        <el-dialog title=\"预览导入\" fullscreen :visible.sync=\"preViewFlag\" :append-to-body=\"true\">\n            <avue-crud  ref=\"preViewCrud\"\n                        :option=\"preViewOption\"\n                        :data=\"preViewData\"\n                        :page=\"preViewPage\"\n                        @on-load=\"getPreViewList\"\n                        :table-loading=\"preViewlistLoading\"\n                        @search-change=\"preHandleFilter\"\n                        @refresh-change=\"preHandleRefreshChange\"\n                        @selection-change=\"selectionChange\">\n                <template slot=\"menuLeft\">\n                    <el-button v-if=\"data_table_add\"\n                               @click=\"importTable\"\n                               size=\"small\"\n                               type=\"primary\"\n                               icon=\"el-icon-download\">导入\n                    </el-button>\n                </template>\n            </avue-crud>\n        </el-dialog>\n\n    </div>\n\n</template>\n\n<script>\n    import {fetchPreViewList,fetchTree,addObj, delObj, fetchList, getObj, putObj,checkDbConn} from \"@/api/portal/metadata/standardfields/table\";\n    import {tableOption,preViewOption,newVue} from '@/const/crud/portal/metadata/standardfields/table';\n    import {mapGetters} from \"vuex\";\n\n    export default {\n        name: \"table\",\n        data() {\n            return {\n                treeOption: {\n                    nodeKey: 'id',\n                    addBtn: false,\n                    menu: false,\n                    props: {\n                        label: 'label',\n                        value: 'value',\n                        children:'children'\n                    }\n                },\n                preViewFlag:false,\n                treeData: [],\n                option: tableOption,\n                preViewOption: preViewOption,\n                checkedKeys: [],\n                tempDbId:undefined,\n                tempDbType:undefined,\n                page: {\n                    total: 0, // 总页数\n                    currentPage: 1, // 当前页数\n                    pageSize: 10, // 每页显示多少条,\n                    isAsc: false//是否倒序\n                },\n                preViewPage: {\n                    total: 0, // 总页数\n                    currentPage: 1, // 当前页数\n                    pageSize: 10, // 每页显示多少条,\n                    isAsc: false//是否倒序\n                },\n                list: [],\n                preViewData: [],\n                listLoading: true,\n                preViewlistLoading: true,\n                form: {},\n                selData: [],\n                editId:\"\",\n            };\n        },\n        computed: {\n            ...mapGetters([\"permissions\"])\n        },\n\n        created() {\n            this.data_table_add = this.permissions[\"data_table_add\"];\n            this.data_table_edit = this.permissions[\"data_table_edit\"];\n            this.data_table_del = this.permissions[\"data_table_del\"];\n            newVue.obj = this\n            this.init();\n        },\n        methods: {\n            init() {\n                fetchTree().then(response => {\n                    this.treeData = response.data.data;\n                });\n            },\n            nodeClick(data) {\n                this.page.page = 1;\n                this.tempDbId=data.id;\n                this.tempDbType = data.value;\n                this.getList(this.page, {dbId: data.id,dbType:data.value});\n            },\n            getList(page, params) {\n                this.listLoading = true;\n                fetchList(Object.assign({\n                    current: page.currentPage,\n                    size: page.pageSize\n                }, params)).then(response => {\n                    this.list = response.data.data.records;\n                    this.page.total = response.data.data.total\n                    this.listLoading = false;\n                });\n            },\n            getPreViewList(preViewPage, params) {\n                this.preViewData =[]\n               if(params === undefined ||params === null || params === '' ){\n                   params ={dbId: this.tempDbId}\n               }\n                this.preViewlistLoading = true;\n                fetchPreViewList(Object.assign({\n                    current: preViewPage.currentPage,\n                    size: preViewPage.pageSize\n                }, params)).then(response => {\n                    this.preViewData = response.data.data;\n                    this.preViewPage.total = response.data.data.total\n                    this.preViewlistLoading = false;\n                });\n                this.$refs.preViewCrud.selectClear();\n            },\n            handleFilter(param) {\n                this.page.page = 1;\n                param.dbId=this.tempDbId;\n                param.dbType=this.tempDbType\n                this.getList(this.page, param);\n            },\n            preHandleFilter(param) {\n                this.preViewPage.page = 1;\n                param.dbId=this.tempDbId;\n                param.dbType=this.tempDbType\n                this.getPreViewList(this.preViewPage, param);\n            },\n            handleRefreshChange() {\n                this.getList(this.page,{dbId: this.tempDbId,dbType:this.tempDbType})\n            },\n            preHandleRefreshChange() {\n                this.getPreViewList(this.preViewPage,{dbId: this.tempDbId,dbType:this.tempDbType})\n            },\n            handleOpenBefore(show, type) {\n                window.boxType = type;\n                this.form.dbId = this.form.dbName;\n                show();\n            },\n            handleUpdate(row, index) {\n                this.$refs.crud.rowEdit(row, index);\n                this.tempDbId = row.dbId\n                this.editId=row.id;\n            },\n            importTable() {\n                if(this.selData.length > 0){\n                    this.$confirm('确认导入?', '提示', {\n                        confirmButtonText: '确定',\n                        cancelButtonText: '取消',\n                        type: 'warning'\n                    }).then(() => {\n                        let defineForm ={}\n                        var nodes = new Array();\n                        for(let i = 0; i < this.selData.length; i++){\n                            nodes.push(JSON.parse(JSON.stringify(this.selData[i])));\n                        }\n                        defineForm['dbId']=this.tempDbId\n                        defineForm['tableList']=nodes\n                        addObj(defineForm).then(() => {\n                            this.preViewFlag = false;\n                            this.getList(this.page,{dbId: this.tempDbId,dbType:this.tempDbType})\n                            this.$notify({\n                                title: \"成功\",\n                                message: \"导入成功\",\n                                type: \"success\",\n                                duration: 2000\n                            });\n                        })\n                    })\n                }else {\n                    this.$message({\n                        showClose: true,\n                        message: '请选择要导入的表',\n                        type: 'warning'\n                    })\n                }\n            },\n            selectionChange(data){\n                this.selData = data\n            },\n            update(row, index, done, loading) {\n                putObj(this.form).then(() => {\n                    this.getList(this.page);\n                    done();\n                    this.$notify({\n                        title: \"成功\",\n                        message: \"修改成功\",\n                        type: \"success\",\n                        duration: 2000\n                    });\n                }).catch(() => {\n                    loading();\n                });\n            },\n            deletes(row, index) {\n                this.$confirm(\n                    \"此操作将永久删除该表(\" + row.name + \"), 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    delObj(row.id).then(() => {\n                        this.getList(this.page)\n                        this.$notify({\n                            title: \"成功\",\n                            message: \"删除成功\",\n                            type: \"success\",\n                            duration: 2000\n                        });\n                    }).cache(() => {\n                        this.$notify({\n                            title: \"失败\",\n                            message: \"删除失败\",\n                            type: \"error\",\n                            duration: 2000\n                        });\n                    });\n                });\n            },\n\n            handleFieldDetail(row, index){\n                this.$router.push({\n                    path: this.$router.$avueRouter.getPath({\n                        name: \"字段编辑\",\n                        src: \"/portal/unit/standard/metadata\"\n                    }),\n                    query: {tbId: row.id,tbName:row.name,dbId:this.tempDbId}\n                });\n            },\n\n            isPreView:function () {\n                if(this.tempDbId===undefined){\n                    return false;\n                }\n                if(this.tempDbType=='Oracle'||this.tempDbType=='MySql'||this.tempDbType=='SQLServer'||this.tempDbType=='DB2'){\n                    return false;\n                }else{\n                    return true;\n                }\n            },\n\n            preViewTest:function () {\n                checkDbConn(this.tempDbId).then(response => {\n                    if(response.data.message===\"测试数据源连接成功\"){\n                        this.preViewFlag=true\n                        this.getPreViewList(this.preViewPage);\n                    }else{\n                        this.$alert(response.data.message, '连接结果', {\n                            confirmButtonText: '确定',\n                            type: 'warning',\n                            callback: action => {\n                            },\n                        });\n                    }\n\n                })\n\n            }\n\n        }\n    };\n</script>\n<style lang=\"scss\">\n    .metadata {\n        height: 100%;\n\n        &__tree {\n            padding-top: 3px;\n            padding-right: 20px;\n        }\n\n        &__main {\n            .el-card__body {\n                padding-top: 0;\n            }\n        }\n    }\n</style>\n\n"]}]}