{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\page\\index\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\page\\index\\index.vue","mtime":1552876441049},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapGetters} from 'vuex'\nimport tags from './tags'\nimport top from './top/'\nimport sidebar from './sidebar/'\nimport admin from '@/util/admin';\nimport {validatenull} from '@/util/validate';\nimport {calcDate} from '@/util/date.js';\nimport {getStore} from '@/util/store.js';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport store from \"@/store\";\nimport Watermark from '@/const/waterMark'\n\nexport default {\n  components: {\n    top,\n    tags,\n    sidebar\n  },\n  name: 'index',\n  data() {\n    return {\n      //刷新token锁\n      refreshLock: false,\n      //刷新token的时间\n      refreshTime: '',\n    }\n  },\n  created() {\n    //实时检测刷新token\n    this.refreshToken()\n  },\n  destroyed() {\n    console.log(\"销毁\")\n    console.log(this.refreshTime)\n    clearInterval(this.refreshTime)\n    this.disconnect()\n  },\n  mounted() {\n    this.init()\n    this.initWebSocket()\n    // 设置水印\n    if(this.waterMark != ''){\n        Watermark.set(this.waterMark)\n    }\n  },\n  computed: mapGetters(['userInfo', 'isLock', 'isCollapse', 'website', 'expires_in', 'waterMark']),\n  props: [],\n  methods: {\n    showCollapse() {\n      this.$store.commit(\"SET_COLLAPSE\")\n    },\n    // 屏幕检测\n    init() {\n      this.$store.commit('SET_SCREEN', admin.getScreen())\n      window.onresize = () => {\n        setTimeout(() => {\n          this.$store.commit('SET_SCREEN', admin.getScreen())\n        }, 0);\n      }\n    },\n    // 实时检测刷新token\n    refreshToken() {\n      this.refreshTime = setInterval(() => {\n        const token = getStore({\n          name: 'access_token',\n          debug: true,\n        });\n\n        if (validatenull(token)) {\n          return;\n        }\n\n        if (this.expires_in <= 1000 && !this.refreshLock) {\n          this.refreshLock = true\n          this.$store\n            .dispatch('RefreshToken')\n            .catch(() => {\n              clearInterval(this.refreshTime)\n            });\n          this.refreshLock = false\n        }\n        this.$store.commit(\"SET_EXPIRES_IN\", this.expires_in - 10);\n      }, 10000);\n    },\n    initWebSocket() {\n      this.connection();\n      let self = this;\n      //断开重连机制,尝试发送消息,捕获异常发生时重连\n      this.timer = setInterval(() => {\n        try {\n          self.stompClient.send(\"test\");\n        } catch (err) {\n          console.log(\"断线了: \" + err);\n          self.connection();\n        }\n      }, 5000);\n    },\n    connection() {\n      let token = store.getters.access_token\n      let TENANT_ID = getStore({name: 'tenantId'})\n      let headers = {\n        'Authorization': 'Bearer ' + token\n      }\n      // 建立连接对象\n      this.socket = new SockJS('/act/ws');//连接服务端提供的通信接口，连接以后才可以订阅广播消息和个人消息\n      // 获取STOMP子协议的客户端对象\n      this.stompClient = Stomp.over(this.socket);\n\n      // 向服务器发起websocket连接\n      this.stompClient.connect(headers, () => {\n        this.stompClient.subscribe('/task/' + this.userInfo.username + \"-\" + TENANT_ID + '/remind', (msg) => { // 订阅服务端提供的某个topic;\n          this.$notify({\n            title: \"协同提醒\",\n            type: 'warning',\n            dangerouslyUseHTMLString: true,\n            message: msg.body + '任务，请及时处理',\n            offset: 60\n          });\n        });\n      }, (err) => {\n\n      });\n    },\n    disconnect() {\n      if (this.stompClient != null) {\n        this.stompClient.disconnect();\n        console.log(\"Disconnected\");\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"index.vue","sourceRoot":"src/page/index","sourcesContent":["<template>\n  <div class=\"avue-contail\"\n       :class=\"{'avue--collapse':isCollapse}\">\n    <div class=\"avue-header\">\n      <!-- 顶部导航栏 -->\n      <top/>\n    </div>\n\n    <div class=\"avue-layout\">\n      <div class=\"avue-left\">\n        <!-- 左侧导航栏 -->\n        <sidebar/>\n      </div>\n      <div class=\"avue-main\">\n        <!-- 顶部标签卡 -->\n        <tags/>\n        <!-- 主体视图层 -->\n        <el-scrollbar style=\"height:100%\">\n          <keep-alive>\n            <router-view class=\"avue-view\"\n                         v-if=\"$route.meta.$keepAlive\"/>\n          </keep-alive>\n          <router-view class=\"avue-view\"\n                       v-if=\"!$route.meta.$keepAlive\"/>\n        </el-scrollbar>\n\n      </div>\n    </div>\n    <div class=\"avue-shade\"\n         @click=\"showCollapse\"></div>\n  </div>\n</template>\n\n<script>\n  import {mapGetters} from 'vuex'\n  import tags from './tags'\n  import top from './top/'\n  import sidebar from './sidebar/'\n  import admin from '@/util/admin';\n  import {validatenull} from '@/util/validate';\n  import {calcDate} from '@/util/date.js';\n  import {getStore} from '@/util/store.js';\n  import SockJS from 'sockjs-client';\n  import Stomp from 'stompjs';\n  import store from \"@/store\";\n  import Watermark from '@/const/waterMark'\n\n  export default {\n    components: {\n      top,\n      tags,\n      sidebar\n    },\n    name: 'index',\n    data() {\n      return {\n        //刷新token锁\n        refreshLock: false,\n        //刷新token的时间\n        refreshTime: '',\n      }\n    },\n    created() {\n      //实时检测刷新token\n      this.refreshToken()\n    },\n    destroyed() {\n      console.log(\"销毁\")\n      console.log(this.refreshTime)\n      clearInterval(this.refreshTime)\n      this.disconnect()\n    },\n    mounted() {\n      this.init()\n      this.initWebSocket()\n      // 设置水印\n      if(this.waterMark != ''){\n          Watermark.set(this.waterMark)\n      }\n    },\n    computed: mapGetters(['userInfo', 'isLock', 'isCollapse', 'website', 'expires_in', 'waterMark']),\n    props: [],\n    methods: {\n      showCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\")\n      },\n      // 屏幕检测\n      init() {\n        this.$store.commit('SET_SCREEN', admin.getScreen())\n        window.onresize = () => {\n          setTimeout(() => {\n            this.$store.commit('SET_SCREEN', admin.getScreen())\n          }, 0);\n        }\n      },\n      // 实时检测刷新token\n      refreshToken() {\n        this.refreshTime = setInterval(() => {\n          const token = getStore({\n            name: 'access_token',\n            debug: true,\n          });\n\n          if (validatenull(token)) {\n            return;\n          }\n\n          if (this.expires_in <= 1000 && !this.refreshLock) {\n            this.refreshLock = true\n            this.$store\n              .dispatch('RefreshToken')\n              .catch(() => {\n                clearInterval(this.refreshTime)\n              });\n            this.refreshLock = false\n          }\n          this.$store.commit(\"SET_EXPIRES_IN\", this.expires_in - 10);\n        }, 10000);\n      },\n      initWebSocket() {\n        this.connection();\n        let self = this;\n        //断开重连机制,尝试发送消息,捕获异常发生时重连\n        this.timer = setInterval(() => {\n          try {\n            self.stompClient.send(\"test\");\n          } catch (err) {\n            console.log(\"断线了: \" + err);\n            self.connection();\n          }\n        }, 5000);\n      },\n      connection() {\n        let token = store.getters.access_token\n        let TENANT_ID = getStore({name: 'tenantId'})\n        let headers = {\n          'Authorization': 'Bearer ' + token\n        }\n        // 建立连接对象\n        this.socket = new SockJS('/act/ws');//连接服务端提供的通信接口，连接以后才可以订阅广播消息和个人消息\n        // 获取STOMP子协议的客户端对象\n        this.stompClient = Stomp.over(this.socket);\n\n        // 向服务器发起websocket连接\n        this.stompClient.connect(headers, () => {\n          this.stompClient.subscribe('/task/' + this.userInfo.username + \"-\" + TENANT_ID + '/remind', (msg) => { // 订阅服务端提供的某个topic;\n            this.$notify({\n              title: \"协同提醒\",\n              type: 'warning',\n              dangerouslyUseHTMLString: true,\n              message: msg.body + '任务，请及时处理',\n              offset: 60\n            });\n          });\n        }, (err) => {\n\n        });\n      },\n      disconnect() {\n        if (this.stompClient != null) {\n          this.stompClient.disconnect();\n          console.log(\"Disconnected\");\n        }\n      }\n    }\n  }\n</script>\n"]}]}