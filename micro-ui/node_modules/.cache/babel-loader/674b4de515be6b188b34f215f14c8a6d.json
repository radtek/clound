{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js!G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\views\\admin\\user\\tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\views\\admin\\user\\tree.vue","mtime":1560132718292},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\nimport { fetchDeptTree, fetchTree } from \"@/api/admin/dept\";\nexport default {\n  name: \"table_user\",\n  data: function data() {\n    return {\n      defaultProps: {\n        children: 'children',\n        label: 'name',\n        isLeaf: \"leaf\"\n      },\n      rid: 0\n    };\n  },\n  mounted: function mounted() {},\n  methods: {\n    handleNodeClick: function handleNodeClick(data) {\n      console.log(\"node\", data);\n    },\n    // 异步树叶子节点懒加载逻辑\n    loadNode: function loadNode(node, resolve) {\n      // 一级节点处理\n      if (node.level === 0) {\n        this.requestTree(resolve);\n      } // 其余节点处理\n\n\n      if (node.level >= 1) {\n        this.getIndex(node, resolve);\n      }\n    },\n    // 异步加载叶子节点数据函数\n    getIndex: function getIndex(node, resolve) {\n      console.log(node);\n      var param = {};\n      fetchTree(param).then(function (response) {\n        var treeData = response.data.data; // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n        // treeData.forEach(value => {\n        //   if (value.isRealLeaf === 'Y') {\n        //     value.leaf = true//不为叶子节点\n        //   } else {\n        //     value.leaf = false//为叶子节点\n        //   }\n        // })\n\n        resolve(treeData);\n      }).catch(function (err) {});\n    },\n    // 首次加载一级节点数据函数\n    requestTree: function requestTree(resolve) {\n      //要传的参数\n      var param = {};\n      fetchTree(param).then(function (response) {\n        var treeData = response.data.data; // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n        //  treeData.forEach(value => {\n        //   if (value.isRealLeaf === 'Y') {\n        //     value.leaf = true//不为叶子节点\n        //   } else {\n        //     value.leaf = false//为叶子节点\n        //   }\n        // })\n\n        resolve(treeData);\n      }).catch(function (err) {});\n    }\n  }\n};",{"version":3,"sources":["tree.vue"],"names":[],"mappings":";;;;;;;;AASA,SAAA,aAAA,EAAA,SAAA,QAAA,kBAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,YAAA,EAAA;AACA,QAAA,QAAA,EAAA,UADA;AAEA,QAAA,KAAA,EAAA,MAFA;AAGA,QAAA,MAAA,EAAA;AAHA,OADA;AAMA,MAAA,GAAA,EAAA;AANA,KAAA;AAQA,GAXA;AAYA,EAAA,OAZA,qBAYA,CACA,CAbA;AAcA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,IADA,EACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,IAAA;AACA,KAHA;AAIA;AACA,IAAA,QALA,oBAKA,IALA,EAKA,OALA,EAKA;AACA;AACA,UAAA,IAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AACA,aAAA,WAAA,CAAA,OAAA;AACA,OAJA,CAKA;;;AACA,UAAA,IAAA,CAAA,KAAA,IAAA,CAAA,EAAA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA,OAAA;AACA;AACA,KAdA;AAeA;AACA,IAAA,QAhBA,oBAgBA,IAhBA,EAgBA,OAhBA,EAgBA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,UAAA,KAAA,GAAA,EAAA;AAEA,MAAA,SAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CADA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAA,OAAA,CAAA,QAAA,CAAA;AACA,OAXA,EAWA,KAXA,CAWA,UAAA,GAAA,EAAA,CACA,CAZA;AAaA,KAjCA;AAkCA;AACA,IAAA,WAnCA,uBAmCA,OAnCA,EAmCA;AACA;AACA,UAAA,KAAA,GAAA,EAAA;AAEA,MAAA,SAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CADA,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAA,OAAA,CAAA,QAAA,CAAA;AACA,OAXA,EAWA,KAXA,CAWA,UAAA,GAAA,EAAA,CACA,CAZA;AAaA;AApDA;AAdA,CAAA","sourcesContent":["<template>\n  <el-tree\n          lazy\n          :props=\"defaultProps\"\n          :load=\"loadNode\"\n          @node-click=\"handleNodeClick\">\n  </el-tree>\n</template>\n<script>\n  import {fetchDeptTree,fetchTree} from \"@/api/admin/dept\";\n  export default {\n    name: \"table_user\",\n    data() {\n      return {\n          defaultProps: {\n              children: 'children',\n              label: 'name',\n              isLeaf: \"leaf\"\n          },\n          rid:0,\n      };\n    },\n    mounted() {\n    },\n    methods: {\n        handleNodeClick(data) {\n            console.log(\"node\", data);\n        },\n        // 异步树叶子节点懒加载逻辑\n        loadNode(node, resolve) {\n            // 一级节点处理\n            if (node.level === 0) {\n                this.requestTree(resolve);\n            }\n            // 其余节点处理\n            if (node.level >= 1) {\n                this.getIndex(node, resolve);\n            }\n        },\n        // 异步加载叶子节点数据函数\n        getIndex(node, resolve) {\n            console.log(node)\n            var param = {\n            };\n            fetchTree(param).then(response => {\n                let treeData = response.data.data;\n                // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n                // treeData.forEach(value => {\n                //   if (value.isRealLeaf === 'Y') {\n                //     value.leaf = true//不为叶子节点\n                //   } else {\n                //     value.leaf = false//为叶子节点\n                //   }\n                // })\n                resolve(treeData);\n            }).catch(err => {\n            });\n        },\n        // 首次加载一级节点数据函数\n        requestTree(resolve) {\n            //要传的参数\n            let param = {\n            };\n            fetchTree(param).then(response => {\n                let treeData = response.data.data;\n                // 此处需要后台传过来一个值来判断每个节点有无子节点,实际项目中必须加上（如isRealLeaf），不传都默认为叶子节点\n                //  treeData.forEach(value => {\n                //   if (value.isRealLeaf === 'Y') {\n                //     value.leaf = true//不为叶子节点\n                //   } else {\n                //     value.leaf = false//为叶子节点\n                //   }\n                // })\n                resolve(treeData);\n            }).catch(err => {\n            });\n        }\n    }\n\n  };\n</script>\n\n\n"],"sourceRoot":"src/views/admin/user"}]}