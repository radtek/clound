{"remainingRequest":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js!G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\intellij work\\micro-ui\\src\\page\\index\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\intellij work\\micro-ui\\src\\page\\index\\index.vue","mtime":1552876441049},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\intellij work\\micro-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport tags from './tags';\nimport top from './top/';\nimport sidebar from './sidebar/';\nimport admin from '@/util/admin';\nimport { validatenull } from '@/util/validate';\nimport { calcDate } from '@/util/date.js';\nimport { getStore } from '@/util/store.js';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport store from \"@/store\";\nimport Watermark from '@/const/waterMark';\nexport default {\n  components: {\n    top: top,\n    tags: tags,\n    sidebar: sidebar\n  },\n  name: 'index',\n  data: function data() {\n    return {\n      //刷新token锁\n      refreshLock: false,\n      //刷新token的时间\n      refreshTime: ''\n    };\n  },\n  created: function created() {\n    //实时检测刷新token\n    this.refreshToken();\n  },\n  destroyed: function destroyed() {\n    console.log(\"销毁\");\n    console.log(this.refreshTime);\n    clearInterval(this.refreshTime);\n    this.disconnect();\n  },\n  mounted: function mounted() {\n    this.init();\n    this.initWebSocket(); // 设置水印\n\n    if (this.waterMark != '') {\n      Watermark.set(this.waterMark);\n    }\n  },\n  computed: mapGetters(['userInfo', 'isLock', 'isCollapse', 'website', 'expires_in', 'waterMark']),\n  props: [],\n  methods: {\n    showCollapse: function showCollapse() {\n      this.$store.commit(\"SET_COLLAPSE\");\n    },\n    // 屏幕检测\n    init: function init() {\n      var _this = this;\n\n      this.$store.commit('SET_SCREEN', admin.getScreen());\n\n      window.onresize = function () {\n        setTimeout(function () {\n          _this.$store.commit('SET_SCREEN', admin.getScreen());\n        }, 0);\n      };\n    },\n    // 实时检测刷新token\n    refreshToken: function refreshToken() {\n      var _this2 = this;\n\n      this.refreshTime = setInterval(function () {\n        var token = getStore({\n          name: 'access_token',\n          debug: true\n        });\n\n        if (validatenull(token)) {\n          return;\n        }\n\n        if (_this2.expires_in <= 1000 && !_this2.refreshLock) {\n          _this2.refreshLock = true;\n\n          _this2.$store.dispatch('RefreshToken').catch(function () {\n            clearInterval(_this2.refreshTime);\n          });\n\n          _this2.refreshLock = false;\n        }\n\n        _this2.$store.commit(\"SET_EXPIRES_IN\", _this2.expires_in - 10);\n      }, 10000);\n    },\n    initWebSocket: function initWebSocket() {\n      this.connection();\n      var self = this; //断开重连机制,尝试发送消息,捕获异常发生时重连\n\n      this.timer = setInterval(function () {\n        try {\n          self.stompClient.send(\"test\");\n        } catch (err) {\n          console.log(\"断线了: \" + err);\n          self.connection();\n        }\n      }, 5000);\n    },\n    connection: function connection() {\n      var _this3 = this;\n\n      var token = store.getters.access_token;\n      var TENANT_ID = getStore({\n        name: 'tenantId'\n      });\n      var headers = {\n        'Authorization': 'Bearer ' + token // 建立连接对象\n\n      };\n      this.socket = new SockJS('/act/ws'); //连接服务端提供的通信接口，连接以后才可以订阅广播消息和个人消息\n      // 获取STOMP子协议的客户端对象\n\n      this.stompClient = Stomp.over(this.socket); // 向服务器发起websocket连接\n\n      this.stompClient.connect(headers, function () {\n        _this3.stompClient.subscribe('/task/' + _this3.userInfo.username + \"-\" + TENANT_ID + '/remind', function (msg) {\n          // 订阅服务端提供的某个topic;\n          _this3.$notify({\n            title: \"协同提醒\",\n            type: 'warning',\n            dangerouslyUseHTMLString: true,\n            message: msg.body + '任务，请及时处理',\n            offset: 60\n          });\n        });\n      }, function (err) {});\n    },\n    disconnect: function disconnect() {\n      if (this.stompClient != null) {\n        this.stompClient.disconnect();\n        console.log(\"Disconnected\");\n      }\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"avue-contail\"\n       :class=\"{'avue--collapse':isCollapse}\">\n    <div class=\"avue-header\">\n      <!-- 顶部导航栏 -->\n      <top/>\n    </div>\n\n    <div class=\"avue-layout\">\n      <div class=\"avue-left\">\n        <!-- 左侧导航栏 -->\n        <sidebar/>\n      </div>\n      <div class=\"avue-main\">\n        <!-- 顶部标签卡 -->\n        <tags/>\n        <!-- 主体视图层 -->\n        <el-scrollbar style=\"height:100%\">\n          <keep-alive>\n            <router-view class=\"avue-view\"\n                         v-if=\"$route.meta.$keepAlive\"/>\n          </keep-alive>\n          <router-view class=\"avue-view\"\n                       v-if=\"!$route.meta.$keepAlive\"/>\n        </el-scrollbar>\n\n      </div>\n    </div>\n    <div class=\"avue-shade\"\n         @click=\"showCollapse\"></div>\n  </div>\n</template>\n\n<script>\n  import {mapGetters} from 'vuex'\n  import tags from './tags'\n  import top from './top/'\n  import sidebar from './sidebar/'\n  import admin from '@/util/admin';\n  import {validatenull} from '@/util/validate';\n  import {calcDate} from '@/util/date.js';\n  import {getStore} from '@/util/store.js';\n  import SockJS from 'sockjs-client';\n  import Stomp from 'stompjs';\n  import store from \"@/store\";\n  import Watermark from '@/const/waterMark'\n\n  export default {\n    components: {\n      top,\n      tags,\n      sidebar\n    },\n    name: 'index',\n    data() {\n      return {\n        //刷新token锁\n        refreshLock: false,\n        //刷新token的时间\n        refreshTime: '',\n      }\n    },\n    created() {\n      //实时检测刷新token\n      this.refreshToken()\n    },\n    destroyed() {\n      console.log(\"销毁\")\n      console.log(this.refreshTime)\n      clearInterval(this.refreshTime)\n      this.disconnect()\n    },\n    mounted() {\n      this.init()\n      this.initWebSocket()\n      // 设置水印\n      if(this.waterMark != ''){\n          Watermark.set(this.waterMark)\n      }\n    },\n    computed: mapGetters(['userInfo', 'isLock', 'isCollapse', 'website', 'expires_in', 'waterMark']),\n    props: [],\n    methods: {\n      showCollapse() {\n        this.$store.commit(\"SET_COLLAPSE\")\n      },\n      // 屏幕检测\n      init() {\n        this.$store.commit('SET_SCREEN', admin.getScreen())\n        window.onresize = () => {\n          setTimeout(() => {\n            this.$store.commit('SET_SCREEN', admin.getScreen())\n          }, 0);\n        }\n      },\n      // 实时检测刷新token\n      refreshToken() {\n        this.refreshTime = setInterval(() => {\n          const token = getStore({\n            name: 'access_token',\n            debug: true,\n          });\n\n          if (validatenull(token)) {\n            return;\n          }\n\n          if (this.expires_in <= 1000 && !this.refreshLock) {\n            this.refreshLock = true\n            this.$store\n              .dispatch('RefreshToken')\n              .catch(() => {\n                clearInterval(this.refreshTime)\n              });\n            this.refreshLock = false\n          }\n          this.$store.commit(\"SET_EXPIRES_IN\", this.expires_in - 10);\n        }, 10000);\n      },\n      initWebSocket() {\n        this.connection();\n        let self = this;\n        //断开重连机制,尝试发送消息,捕获异常发生时重连\n        this.timer = setInterval(() => {\n          try {\n            self.stompClient.send(\"test\");\n          } catch (err) {\n            console.log(\"断线了: \" + err);\n            self.connection();\n          }\n        }, 5000);\n      },\n      connection() {\n        let token = store.getters.access_token\n        let TENANT_ID = getStore({name: 'tenantId'})\n        let headers = {\n          'Authorization': 'Bearer ' + token\n        }\n        // 建立连接对象\n        this.socket = new SockJS('/act/ws');//连接服务端提供的通信接口，连接以后才可以订阅广播消息和个人消息\n        // 获取STOMP子协议的客户端对象\n        this.stompClient = Stomp.over(this.socket);\n\n        // 向服务器发起websocket连接\n        this.stompClient.connect(headers, () => {\n          this.stompClient.subscribe('/task/' + this.userInfo.username + \"-\" + TENANT_ID + '/remind', (msg) => { // 订阅服务端提供的某个topic;\n            this.$notify({\n              title: \"协同提醒\",\n              type: 'warning',\n              dangerouslyUseHTMLString: true,\n              message: msg.body + '任务，请及时处理',\n              offset: 60\n            });\n          });\n        }, (err) => {\n\n        });\n      },\n      disconnect() {\n        if (this.stompClient != null) {\n          this.stompClient.disconnect();\n          console.log(\"Disconnected\");\n        }\n      }\n    }\n  }\n</script>\n"],"sourceRoot":"src/page/index"}]}